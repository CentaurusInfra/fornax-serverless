/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto2";
package centaurusinfra.io.fornaxcore.service;

option go_package = "centaurusinfra.io/fornax-serverless/pkg/fornaxcore/grpc";

import "google/protobuf/empty.proto";
import "k8s.io/api/core/v1/generated.proto";

service FornaxCoreService {
  rpc getMessage(NodeIdentifier) returns (stream FornaxCoreMessage);
  rpc putMessage(FornaxCoreMessage) returns (google.protobuf.Empty);
}

enum MessageType {
    UNSPECIFIED = 0;
    FORNAX_CORE_CONFIGURATION = 100;
    NODE_CONFIGURATION = 200;
    NODE_REGISTER = 201;
    NODE_READY = 202;
    NODE_STATE = 203;
    POD_CREATE = 300;
    POD_TERMINATE = 301;
    POD_ACTIVE = 302;
    POD_STATE = 303;
    SESSION_START = 400;
    SESSION_CLOSE = 401;
    SESSION_STATE = 402;
}
 
message FornaxCoreMessage {
  required string messageIdentifier = 1;
  required NodeIdentifier nodeIdentifier = 2;
  required MessageType messageType = 3;
  oneof MessageBody {
    FornaxCoreConfiguration fornaxCoreConfiguration = 100;
    NodeConfiguration nodeConfiguration = 200;
    NodeRegistry nodeRegistry = 201;
    NodeReady nodeReady = 202;
    NodeState nodeState= 203;
    PodCreate podCreate = 300;
    PodTerminate podTerminate = 301;
    PodActive podActive = 302;
    PodState podState = 303;
    SessionStart sessionStart = 400;
    SessionClose sessionClose = 401;
    SessionState sessionState = 402;
  }
}

message FornaxCore {
  required string ip = 1;
  required string identifier = 2;
}

message FornaxCoreConfiguration {
  required FornaxCore primary = 1;
  repeated FornaxCore standbys = 2;
}

message NodeIdentifier {
  required string ip = 1;
  required string identifier = 2;
}

message NodeConfiguration {
  required string clusterDomain = 1;
  required k8s.io.api.core.v1.Node node = 2;
  repeated k8s.io.api.core.v1.Pod daemonPods = 3;
}

message NodeRegistry {
  required string nodeIp = 1;
  required k8s.io.api.core.v1.Node node = 2;
}

message NodeResource {
  required string nodeIp = 1;
  required k8s.io.api.core.v1.Node node = 2;
}

message NodeReady {
  required string nodeIp = 1;
  required k8s.io.api.core.v1.Node node = 2;
}

message NodeState {
  required string nodeIp = 1;
  required k8s.io.api.core.v1.Node node = 2;
  repeated PodState podStates = 3;
  repeated SessionState sessionStates = 4;
}

message PodState {
  required string podIdentifier = 1;
  required string appIdentifier = 2;
  enum State {
    Creating = 0;
    Standby = 10;
    Activating = 20;
    Running = 30;
    Evacuating = 40;
    Terminating = 50;
    Terminated = 60;
  }
  required State state = 3;
  required k8s.io.api.core.v1.PodStatus podStatus = 4;
  optional PodResource resource = 5;
}

message PodResource {
  optional k8s.io.api.core.v1.ResourceQuotaStatus resourceQuotaStatus = 1;
  repeated k8s.io.api.core.v1.AttachedVolume volumes = 2;
}

message PodCreate {
  required string podIdentifier = 1;
  required string appIdentifier = 2;
  enum CreateMode {
    Active = 0;
    Standby = 10;
  }
  required CreateMode mode = 3;
  required k8s.io.api.core.v1.Pod pod = 4;
  optional k8s.io.api.core.v1.ConfigMap configMap = 5;
}

message  PodTerminate {
  required string podIdentifier = 1;
  required string appIdentifier = 2;
}

message  PodActive {
  required string podIdentifier = 1;
  required string appIdentifier = 2;
}

message SessionState {
  required string sessionIdentifier = 1;
  required string podIdentifier = 2;
  required string appIdentifier = 3;
  enum State {
    Starting = 0;
    Ready = 10;
    Live = 20;
    Evacuating = 30;
    Terminating = 40;
    Terminated = 50;
  }
  required State state = 4;
}

message SessionStart {
  required string sessionIdentifier = 1;
  required string podIdentifier = 2;
  required string appIdentifier = 3;
  required string sessionData = 4;
}

message SessionClose {
  required string sessionIdentifier = 1;
  required string podIdentifier = 2;
  required string appIdentifier = 3;
}
