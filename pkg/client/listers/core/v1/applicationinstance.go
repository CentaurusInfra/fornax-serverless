/*
Copyright 2022 The fornax-serverless Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationInstanceLister helps list ApplicationInstances.
// All objects returned here must be treated as read-only.
type ApplicationInstanceLister interface {
	// List lists all ApplicationInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApplicationInstance, err error)
	// ApplicationInstances returns an object that can list and get ApplicationInstances.
	ApplicationInstances(namespace string) ApplicationInstanceNamespaceLister
	ApplicationInstanceListerExpansion
}

// applicationInstanceLister implements the ApplicationInstanceLister interface.
type applicationInstanceLister struct {
	indexer cache.Indexer
}

// NewApplicationInstanceLister returns a new ApplicationInstanceLister.
func NewApplicationInstanceLister(indexer cache.Indexer) ApplicationInstanceLister {
	return &applicationInstanceLister{indexer: indexer}
}

// List lists all ApplicationInstances in the indexer.
func (s *applicationInstanceLister) List(selector labels.Selector) (ret []*v1.ApplicationInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApplicationInstance))
	})
	return ret, err
}

// ApplicationInstances returns an object that can list and get ApplicationInstances.
func (s *applicationInstanceLister) ApplicationInstances(namespace string) ApplicationInstanceNamespaceLister {
	return applicationInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationInstanceNamespaceLister helps list and get ApplicationInstances.
// All objects returned here must be treated as read-only.
type ApplicationInstanceNamespaceLister interface {
	// List lists all ApplicationInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApplicationInstance, err error)
	// Get retrieves the ApplicationInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApplicationInstance, error)
	ApplicationInstanceNamespaceListerExpansion
}

// applicationInstanceNamespaceLister implements the ApplicationInstanceNamespaceLister
// interface.
type applicationInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationInstances in the indexer for a given namespace.
func (s applicationInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.ApplicationInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApplicationInstance))
	})
	return ret, err
}

// Get retrieves the ApplicationInstance from the indexer for a given namespace and name.
func (s applicationInstanceNamespaceLister) Get(name string) (*v1.ApplicationInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("applicationinstance"), name)
	}
	return obj.(*v1.ApplicationInstance), nil
}
