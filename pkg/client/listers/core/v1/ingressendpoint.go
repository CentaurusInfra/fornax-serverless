/*
Copyright 2022 The fornax-serverless Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngressEndpointLister helps list IngressEndpoints.
// All objects returned here must be treated as read-only.
type IngressEndpointLister interface {
	// List lists all IngressEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IngressEndpoint, err error)
	// IngressEndpoints returns an object that can list and get IngressEndpoints.
	IngressEndpoints(namespace string) IngressEndpointNamespaceLister
	IngressEndpointListerExpansion
}

// ingressEndpointLister implements the IngressEndpointLister interface.
type ingressEndpointLister struct {
	indexer cache.Indexer
}

// NewIngressEndpointLister returns a new IngressEndpointLister.
func NewIngressEndpointLister(indexer cache.Indexer) IngressEndpointLister {
	return &ingressEndpointLister{indexer: indexer}
}

// List lists all IngressEndpoints in the indexer.
func (s *ingressEndpointLister) List(selector labels.Selector) (ret []*v1.IngressEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IngressEndpoint))
	})
	return ret, err
}

// IngressEndpoints returns an object that can list and get IngressEndpoints.
func (s *ingressEndpointLister) IngressEndpoints(namespace string) IngressEndpointNamespaceLister {
	return ingressEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressEndpointNamespaceLister helps list and get IngressEndpoints.
// All objects returned here must be treated as read-only.
type IngressEndpointNamespaceLister interface {
	// List lists all IngressEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IngressEndpoint, err error)
	// Get retrieves the IngressEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.IngressEndpoint, error)
	IngressEndpointNamespaceListerExpansion
}

// ingressEndpointNamespaceLister implements the IngressEndpointNamespaceLister
// interface.
type ingressEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressEndpoints in the indexer for a given namespace.
func (s ingressEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1.IngressEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IngressEndpoint))
	})
	return ret, err
}

// Get retrieves the IngressEndpoint from the indexer for a given namespace and name.
func (s ingressEndpointNamespaceLister) Get(name string) (*v1.IngressEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ingressendpoint"), name)
	}
	return obj.(*v1.IngressEndpoint), nil
}
