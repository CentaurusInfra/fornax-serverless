//
//Copyright 2022.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.1
// source: pkg/nodeagent/sessionservice/grpc/session_service.proto

package grpc

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_UNSPECIFIED           MessageType = 0
	MessageType_SESSION_CONFIGURATION MessageType = 100
	MessageType_OPEN_SESSION          MessageType = 101
	MessageType_CLOSE_SESSION         MessageType = 102
	MessageType_PING_SESSION          MessageType = 103
	MessageType_SESSION_STATE         MessageType = 104
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:   "UNSPECIFIED",
		100: "SESSION_CONFIGURATION",
		101: "OPEN_SESSION",
		102: "CLOSE_SESSION",
		103: "PING_SESSION",
		104: "SESSION_STATE",
	}
	MessageType_value = map[string]int32{
		"UNSPECIFIED":           0,
		"SESSION_CONFIGURATION": 100,
		"OPEN_SESSION":          101,
		"CLOSE_SESSION":         102,
		"PING_SESSION":          103,
		"SESSION_STATE":         104,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{0}
}

type SessionState int32

const (
	SessionState_STATE_INITIALIZING SessionState = 0
	SessionState_STATE_OPEN         SessionState = 101
	SessionState_STATE_CLOSED       SessionState = 102
	SessionState_STATE_CLOSING      SessionState = 103
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0:   "STATE_INITIALIZING",
		101: "STATE_OPEN",
		102: "STATE_CLOSED",
		103: "STATE_CLOSING",
	}
	SessionState_value = map[string]int32{
		"STATE_INITIALIZING": 0,
		"STATE_OPEN":         101,
		"STATE_CLOSED":       102,
		"STATE_CLOSING":      103,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_enumTypes[1].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_enumTypes[1]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{1}
}

type SessionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIdentifier string             `protobuf:"bytes,1,opt,name=messageIdentifier,proto3" json:"messageIdentifier,omitempty"`
	SessionIdentifier *SessionIdentifier `protobuf:"bytes,2,opt,name=sessionIdentifier,proto3" json:"sessionIdentifier,omitempty"`
	MessageType       MessageType        `protobuf:"varint,3,opt,name=messageType,proto3,enum=centaurusinfra.io.fornaxcore.nodeagent.sessionservice.MessageType" json:"messageType,omitempty"`
	// Types that are assignable to MessageBody:
	//	*SessionMessage_SessionConfiguration
	//	*SessionMessage_OpenSession
	//	*SessionMessage_CloseSession
	//	*SessionMessage_PingSession
	//	*SessionMessage_SessionStatus
	MessageBody isSessionMessage_MessageBody `protobuf_oneof:"MessageBody"`
}

func (x *SessionMessage) Reset() {
	*x = SessionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMessage) ProtoMessage() {}

func (x *SessionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMessage.ProtoReflect.Descriptor instead.
func (*SessionMessage) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{0}
}

func (x *SessionMessage) GetMessageIdentifier() string {
	if x != nil {
		return x.MessageIdentifier
	}
	return ""
}

func (x *SessionMessage) GetSessionIdentifier() *SessionIdentifier {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *SessionMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_UNSPECIFIED
}

func (m *SessionMessage) GetMessageBody() isSessionMessage_MessageBody {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

func (x *SessionMessage) GetSessionConfiguration() *SessionConfiguration {
	if x, ok := x.GetMessageBody().(*SessionMessage_SessionConfiguration); ok {
		return x.SessionConfiguration
	}
	return nil
}

func (x *SessionMessage) GetOpenSession() *OpenSession {
	if x, ok := x.GetMessageBody().(*SessionMessage_OpenSession); ok {
		return x.OpenSession
	}
	return nil
}

func (x *SessionMessage) GetCloseSession() *CloseSession {
	if x, ok := x.GetMessageBody().(*SessionMessage_CloseSession); ok {
		return x.CloseSession
	}
	return nil
}

func (x *SessionMessage) GetPingSession() *PingSession {
	if x, ok := x.GetMessageBody().(*SessionMessage_PingSession); ok {
		return x.PingSession
	}
	return nil
}

func (x *SessionMessage) GetSessionStatus() *SessionStatus {
	if x, ok := x.GetMessageBody().(*SessionMessage_SessionStatus); ok {
		return x.SessionStatus
	}
	return nil
}

type isSessionMessage_MessageBody interface {
	isSessionMessage_MessageBody()
}

type SessionMessage_SessionConfiguration struct {
	SessionConfiguration *SessionConfiguration `protobuf:"bytes,100,opt,name=sessionConfiguration,proto3,oneof"`
}

type SessionMessage_OpenSession struct {
	OpenSession *OpenSession `protobuf:"bytes,101,opt,name=openSession,proto3,oneof"`
}

type SessionMessage_CloseSession struct {
	CloseSession *CloseSession `protobuf:"bytes,102,opt,name=closeSession,proto3,oneof"`
}

type SessionMessage_PingSession struct {
	PingSession *PingSession `protobuf:"bytes,103,opt,name=pingSession,proto3,oneof"`
}

type SessionMessage_SessionStatus struct {
	SessionStatus *SessionStatus `protobuf:"bytes,104,opt,name=sessionStatus,proto3,oneof"`
}

func (*SessionMessage_SessionConfiguration) isSessionMessage_MessageBody() {}

func (*SessionMessage_OpenSession) isSessionMessage_MessageBody() {}

func (*SessionMessage_CloseSession) isSessionMessage_MessageBody() {}

func (*SessionMessage_PingSession) isSessionMessage_MessageBody() {}

func (*SessionMessage_SessionStatus) isSessionMessage_MessageBody() {}

type PodIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId string `protobuf:"bytes,1,opt,name=podId,proto3" json:"podId,omitempty"`
}

func (x *PodIdentifier) Reset() {
	*x = PodIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodIdentifier) ProtoMessage() {}

func (x *PodIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodIdentifier.ProtoReflect.Descriptor instead.
func (*PodIdentifier) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{1}
}

func (x *PodIdentifier) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

type SessionIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId      string `protobuf:"bytes,1,opt,name=podId,proto3" json:"podId,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *SessionIdentifier) Reset() {
	*x = SessionIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIdentifier) ProtoMessage() {}

func (x *SessionIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIdentifier.ProtoReflect.Descriptor instead.
func (*SessionIdentifier) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{2}
}

func (x *SessionIdentifier) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *SessionIdentifier) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// session configuration to session to initialize or modify its configuration
type SessionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionData []byte `protobuf:"bytes,1,opt,name=sessionData,proto3" json:"sessionData,omitempty"` // a container specific blob
}

func (x *SessionConfiguration) Reset() {
	*x = SessionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfiguration) ProtoMessage() {}

func (x *SessionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfiguration.ProtoReflect.Descriptor instead.
func (*SessionConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{3}
}

func (x *SessionConfiguration) GetSessionData() []byte {
	if x != nil {
		return x.SessionData
	}
	return nil
}

// request container to initialize a session,
//container send a session state message back to notify session is ready for client use
type OpenSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionConfiguration *SessionConfiguration `protobuf:"bytes,1,opt,name=sessionConfiguration,proto3" json:"sessionConfiguration,omitempty"`
}

func (x *OpenSession) Reset() {
	*x = OpenSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSession) ProtoMessage() {}

func (x *OpenSession) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSession.ProtoReflect.Descriptor instead.
func (*OpenSession) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{4}
}

func (x *OpenSession) GetSessionConfiguration() *SessionConfiguration {
	if x != nil {
		return x.SessionConfiguration
	}
	return nil
}

// close session and notify client to left, and container will close session after gracePeriodSeconds
//container send a session state message back to notify session is closed
type CloseSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GracePeriodSeconds int64 `protobuf:"varint,1,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,omitempty"`
}

func (x *CloseSession) Reset() {
	*x = CloseSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSession) ProtoMessage() {}

func (x *CloseSession) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSession.ProtoReflect.Descriptor instead.
func (*CloseSession) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{5}
}

func (x *CloseSession) GetGracePeriodSeconds() int64 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

// ping session and request container to report its status container send a session state message back,
//if session do not reply ping request consecutively, session is considered as dead, and pod will be terminated
type PingSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingSession) Reset() {
	*x = PingSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingSession) ProtoMessage() {}

func (x *PingSession) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingSession.ProtoReflect.Descriptor instead.
func (*PingSession) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{6}
}

// container keep its internal state of clients are on this session, in long term it could be managed via ingress gateway
type ClientSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIdentifier string               `protobuf:"bytes,1,opt,name=clientIdentifier,proto3" json:"clientIdentifier,omitempty"`
	TimeJoin         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timeJoin,proto3" json:"timeJoin,omitempty"`
	TimeExit         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timeExit,proto3" json:"timeExit,omitempty"`
}

func (x *ClientSession) Reset() {
	*x = ClientSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSession) ProtoMessage() {}

func (x *ClientSession) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSession.ProtoReflect.Descriptor instead.
func (*ClientSession) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{7}
}

func (x *ClientSession) GetClientIdentifier() string {
	if x != nil {
		return x.ClientIdentifier
	}
	return ""
}

func (x *ClientSession) GetTimeJoin() *timestamp.Timestamp {
	if x != nil {
		return x.TimeJoin
	}
	return nil
}

func (x *ClientSession) GetTimeExit() *timestamp.Timestamp {
	if x != nil {
		return x.TimeExit
	}
	return nil
}

// container report its state and clients is using this session
type SessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionState  SessionState     `protobuf:"varint,1,opt,name=sessionState,proto3,enum=centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionState" json:"sessionState,omitempty"`
	ClientSession []*ClientSession `protobuf:"bytes,2,rep,name=clientSession,proto3" json:"clientSession,omitempty"`
}

func (x *SessionStatus) Reset() {
	*x = SessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStatus) ProtoMessage() {}

func (x *SessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStatus.ProtoReflect.Descriptor instead.
func (*SessionStatus) Descriptor() ([]byte, []int) {
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP(), []int{8}
}

func (x *SessionStatus) GetSessionState() SessionState {
	if x != nil {
		return x.SessionState
	}
	return SessionState_STATE_INITIALIZING
}

func (x *SessionStatus) GetClientSession() []*ClientSession {
	if x != nil {
		return x.ClientSession
	}
	return nil
}

var File_pkg_nodeagent_sessionservice_grpc_session_service_proto protoreflect.FileDescriptor

var file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x70, 0x6b, 0x67, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72,
	0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8,
	0x06, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x76, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x66, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61,
	0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0c, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f,
	0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x25, 0x0a, 0x0d, 0x50, 0x6f, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64,
	0x22, 0x49, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x14, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x78, 0x69, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e,
	0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75,
	0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x83, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x67, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x68,
	0x2a, 0x5b, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x67, 0x32, 0x9b, 0x02,
	0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x45, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75,
	0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x6b,
	0x0a, 0x0a, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x47, 0x5a, 0x45, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f,
	0x2f, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescOnce sync.Once
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescData = file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDesc
)

func file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescGZIP() []byte {
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescOnce.Do(func() {
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescData)
	})
	return file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDescData
}

var file_pkg_nodeagent_sessionservice_grpc_session_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pkg_nodeagent_sessionservice_grpc_session_service_proto_goTypes = []interface{}{
	(MessageType)(0),             // 0: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.MessageType
	(SessionState)(0),            // 1: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionState
	(*SessionMessage)(nil),       // 2: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage
	(*PodIdentifier)(nil),        // 3: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.PodIdentifier
	(*SessionIdentifier)(nil),    // 4: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionIdentifier
	(*SessionConfiguration)(nil), // 5: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionConfiguration
	(*OpenSession)(nil),          // 6: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.OpenSession
	(*CloseSession)(nil),         // 7: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.CloseSession
	(*PingSession)(nil),          // 8: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.PingSession
	(*ClientSession)(nil),        // 9: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.ClientSession
	(*SessionStatus)(nil),        // 10: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionStatus
	(*timestamp.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*empty.Empty)(nil),          // 12: google.protobuf.Empty
}
var file_pkg_nodeagent_sessionservice_grpc_session_service_proto_depIdxs = []int32{
	4,  // 0: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.sessionIdentifier:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionIdentifier
	0,  // 1: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.messageType:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.MessageType
	5,  // 2: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.sessionConfiguration:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionConfiguration
	6,  // 3: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.openSession:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.OpenSession
	7,  // 4: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.closeSession:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.CloseSession
	8,  // 5: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.pingSession:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.PingSession
	10, // 6: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage.sessionStatus:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionStatus
	5,  // 7: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.OpenSession.sessionConfiguration:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionConfiguration
	11, // 8: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.ClientSession.timeJoin:type_name -> google.protobuf.Timestamp
	11, // 9: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.ClientSession.timeExit:type_name -> google.protobuf.Timestamp
	1,  // 10: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionStatus.sessionState:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionState
	9,  // 11: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionStatus.clientSession:type_name -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.ClientSession
	3,  // 12: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService.getMessage:input_type -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.PodIdentifier
	2,  // 13: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService.putMessage:input_type -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage
	2,  // 14: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService.getMessage:output_type -> centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionMessage
	12, // 15: centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService.putMessage:output_type -> google.protobuf.Empty
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pkg_nodeagent_sessionservice_grpc_session_service_proto_init() }
func file_pkg_nodeagent_sessionservice_grpc_session_service_proto_init() {
	if File_pkg_nodeagent_sessionservice_grpc_session_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SessionMessage_SessionConfiguration)(nil),
		(*SessionMessage_OpenSession)(nil),
		(*SessionMessage_CloseSession)(nil),
		(*SessionMessage_PingSession)(nil),
		(*SessionMessage_SessionStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_nodeagent_sessionservice_grpc_session_service_proto_goTypes,
		DependencyIndexes: file_pkg_nodeagent_sessionservice_grpc_session_service_proto_depIdxs,
		EnumInfos:         file_pkg_nodeagent_sessionservice_grpc_session_service_proto_enumTypes,
		MessageInfos:      file_pkg_nodeagent_sessionservice_grpc_session_service_proto_msgTypes,
	}.Build()
	File_pkg_nodeagent_sessionservice_grpc_session_service_proto = out.File
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_rawDesc = nil
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_goTypes = nil
	file_pkg_nodeagent_sessionservice_grpc_session_service_proto_depIdxs = nil
}
