/*
Copyright 2022 The fornax-serverless Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ // Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centaurusinfra.io/fornax-serverless/pkg/apis/core/v1/generated.proto

package v1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	k8s_io_api_core_v1 "k8s.io/api/core/v1"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AccessEndPoint) Reset()      { *m = AccessEndPoint{} }
func (*AccessEndPoint) ProtoMessage() {}
func (*AccessEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{0}
}
func (m *AccessEndPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AccessEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessEndPoint.Merge(m, src)
}
func (m *AccessEndPoint) XXX_Size() int {
	return m.Size()
}
func (m *AccessEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_AccessEndPoint proto.InternalMessageInfo

func (m *Application) Reset()      { *m = Application{} }
func (*Application) ProtoMessage() {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{1}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *ApplicationList) Reset()      { *m = ApplicationList{} }
func (*ApplicationList) ProtoMessage() {}
func (*ApplicationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{2}
}
func (m *ApplicationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationList.Merge(m, src)
}
func (m *ApplicationList) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationList.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationList proto.InternalMessageInfo

func (m *ApplicationSession) Reset()      { *m = ApplicationSession{} }
func (*ApplicationSession) ProtoMessage() {}
func (*ApplicationSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{3}
}
func (m *ApplicationSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSession.Merge(m, src)
}
func (m *ApplicationSession) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSession.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSession proto.InternalMessageInfo

func (m *ApplicationSessionList) Reset()      { *m = ApplicationSessionList{} }
func (*ApplicationSessionList) ProtoMessage() {}
func (*ApplicationSessionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{4}
}
func (m *ApplicationSessionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSessionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationSessionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSessionList.Merge(m, src)
}
func (m *ApplicationSessionList) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSessionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSessionList.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSessionList proto.InternalMessageInfo

func (m *ApplicationSessionSpec) Reset()      { *m = ApplicationSessionSpec{} }
func (*ApplicationSessionSpec) ProtoMessage() {}
func (*ApplicationSessionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{5}
}
func (m *ApplicationSessionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSessionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationSessionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSessionSpec.Merge(m, src)
}
func (m *ApplicationSessionSpec) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSessionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSessionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSessionSpec proto.InternalMessageInfo

func (m *ApplicationSessionStatus) Reset()      { *m = ApplicationSessionStatus{} }
func (*ApplicationSessionStatus) ProtoMessage() {}
func (*ApplicationSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{6}
}
func (m *ApplicationSessionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSessionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationSessionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSessionStatus.Merge(m, src)
}
func (m *ApplicationSessionStatus) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSessionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSessionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSessionStatus proto.InternalMessageInfo

func (m *ApplicationSpec) Reset()      { *m = ApplicationSpec{} }
func (*ApplicationSpec) ProtoMessage() {}
func (*ApplicationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{7}
}
func (m *ApplicationSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSpec.Merge(m, src)
}
func (m *ApplicationSpec) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSpec proto.InternalMessageInfo

func (m *ApplicationStatus) Reset()      { *m = ApplicationStatus{} }
func (*ApplicationStatus) ProtoMessage() {}
func (*ApplicationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{8}
}
func (m *ApplicationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationStatus.Merge(m, src)
}
func (m *ApplicationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationStatus proto.InternalMessageInfo

func (m *DeploymentHistory) Reset()      { *m = DeploymentHistory{} }
func (*DeploymentHistory) ProtoMessage() {}
func (*DeploymentHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{9}
}
func (m *DeploymentHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeploymentHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentHistory.Merge(m, src)
}
func (m *DeploymentHistory) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentHistory proto.InternalMessageInfo

func (m *IdelSessionNumThreshold) Reset()      { *m = IdelSessionNumThreshold{} }
func (*IdelSessionNumThreshold) ProtoMessage() {}
func (*IdelSessionNumThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{10}
}
func (m *IdelSessionNumThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdelSessionNumThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IdelSessionNumThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdelSessionNumThreshold.Merge(m, src)
}
func (m *IdelSessionNumThreshold) XXX_Size() int {
	return m.Size()
}
func (m *IdelSessionNumThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_IdelSessionNumThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_IdelSessionNumThreshold proto.InternalMessageInfo

func (m *IdelSessionPercentThreshold) Reset()      { *m = IdelSessionPercentThreshold{} }
func (*IdelSessionPercentThreshold) ProtoMessage() {}
func (*IdelSessionPercentThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{11}
}
func (m *IdelSessionPercentThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdelSessionPercentThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IdelSessionPercentThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdelSessionPercentThreshold.Merge(m, src)
}
func (m *IdelSessionPercentThreshold) XXX_Size() int {
	return m.Size()
}
func (m *IdelSessionPercentThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_IdelSessionPercentThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_IdelSessionPercentThreshold proto.InternalMessageInfo

func (m *ScalingPolicy) Reset()      { *m = ScalingPolicy{} }
func (*ScalingPolicy) ProtoMessage() {}
func (*ScalingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cea0a4ebac5bf7e, []int{12}
}
func (m *ScalingPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScalingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalingPolicy.Merge(m, src)
}
func (m *ScalingPolicy) XXX_Size() int {
	return m.Size()
}
func (m *ScalingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ScalingPolicy proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AccessEndPoint)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.AccessEndPoint")
	proto.RegisterType((*Application)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.Application")
	proto.RegisterType((*ApplicationList)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationList")
	proto.RegisterType((*ApplicationSession)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationSession")
	proto.RegisterType((*ApplicationSessionList)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationSessionList")
	proto.RegisterType((*ApplicationSessionSpec)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationSessionSpec")
	proto.RegisterType((*ApplicationSessionStatus)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationSessionStatus")
	proto.RegisterType((*ApplicationSpec)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationSpec")
	proto.RegisterMapType((map[string]string)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationSpec.ConfigDataEntry")
	proto.RegisterType((*ApplicationStatus)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ApplicationStatus")
	proto.RegisterType((*DeploymentHistory)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.DeploymentHistory")
	proto.RegisterType((*IdelSessionNumThreshold)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.IdelSessionNumThreshold")
	proto.RegisterType((*IdelSessionPercentThreshold)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.IdelSessionPercentThreshold")
	proto.RegisterType((*ScalingPolicy)(nil), "centaurusinfra.io.fornax_serverless.pkg.apis.core.v1.ScalingPolicy")
}

func init() {
	proto.RegisterFile("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1/generated.proto", fileDescriptor_2cea0a4ebac5bf7e)
}

var fileDescriptor_2cea0a4ebac5bf7e = []byte{
	// 1556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xc7, 0xb3, 0x7e, 0xc9, 0xcb, 0xf8, 0xe7, 0xbc, 0xcc, 0x0f, 0x1a, 0x93, 0x28, 0x4e, 0x64,
	0x44, 0x15, 0x10, 0x5d, 0x93, 0xa8, 0xa0, 0xaa, 0x08, 0x24, 0x6f, 0x52, 0xb5, 0xa1, 0x49, 0xea,
	0x4e, 0x12, 0x15, 0xaa, 0xaa, 0x30, 0xd9, 0x9d, 0xd8, 0x43, 0xd6, 0x3b, 0xab, 0x9d, 0xb5, 0xdb,
	0xdc, 0x7a, 0x40, 0x42, 0x1c, 0x90, 0xf8, 0x1b, 0x10, 0x47, 0x0e, 0x1c, 0xf8, 0x23, 0xca, 0xad,
	0x37, 0x7a, 0x40, 0x11, 0x35, 0x82, 0x3f, 0x81, 0x43, 0x4e, 0x68, 0x66, 0x67, 0xbd, 0x2f, 0xb6,
	0xa3, 0x36, 0x89, 0x7a, 0xdb, 0x9d, 0xe7, 0x79, 0x3e, 0xcf, 0x33, 0x33, 0xdf, 0x79, 0x76, 0x6c,
	0xb0, 0x6e, 0x12, 0xc7, 0xc7, 0x6d, 0xaf, 0xcd, 0xa9, 0x73, 0xe0, 0x61, 0x9d, 0xb2, 0xea, 0x01,
	0xf3, 0x1c, 0xfc, 0xf8, 0x0a, 0x27, 0x5e, 0x87, 0x78, 0x36, 0xe1, 0xbc, 0xea, 0x1e, 0x36, 0xaa,
	0xd8, 0xa5, 0xbc, 0x6a, 0x32, 0x8f, 0x54, 0x3b, 0x2b, 0xd5, 0x06, 0x71, 0x88, 0x87, 0x7d, 0x62,
	0xe9, 0xae, 0xc7, 0x7c, 0x06, 0xaf, 0xf6, 0x51, 0xf4, 0x80, 0xf2, 0x65, 0x44, 0xd1, 0xdd, 0xc3,
	0x86, 0x2e, 0x28, 0xba, 0xa0, 0xe8, 0x9d, 0x95, 0xb9, 0x2b, 0x0d, 0xea, 0x37, 0xdb, 0xfb, 0xba,
	0xc9, 0x5a, 0xd5, 0x06, 0x6b, 0xb0, 0xaa, 0x84, 0xed, 0xb7, 0x0f, 0xe4, 0x9b, 0x7c, 0x91, 0x4f,
	0x41, 0x92, 0xb9, 0xca, 0xe1, 0x35, 0x2e, 0xea, 0xc3, 0x2e, 0x1d, 0x56, 0xc8, 0xdc, 0xd5, 0xc8,
	0xa7, 0x85, 0xcd, 0x26, 0x75, 0x88, 0x77, 0x14, 0x95, 0xdf, 0x22, 0x3e, 0x1e, 0x14, 0xf5, 0xd1,
	0xb0, 0x28, 0xaf, 0xed, 0xf8, 0xb4, 0x45, 0xaa, 0xdc, 0x6c, 0x92, 0x16, 0x4e, 0xc7, 0x55, 0x7e,
	0xd1, 0xc0, 0x64, 0xcd, 0x34, 0x09, 0xe7, 0x37, 0x1c, 0xab, 0xce, 0xa8, 0xe3, 0xc3, 0xdb, 0x60,
	0x5c, 0xda, 0x4c, 0x66, 0x97, 0xb4, 0x25, 0x6d, 0x79, 0xc2, 0xa8, 0x3e, 0x3d, 0x5e, 0x1c, 0xe9,
	0x1e, 0x2f, 0x8e, 0xd7, 0xd5, 0xf8, 0xc9, 0xf1, 0xe2, 0x7c, 0xff, 0x54, 0xf4, 0xd0, 0x8c, 0x7a,
	0x00, 0x58, 0x05, 0x13, 0xd4, 0xad, 0x59, 0x96, 0x47, 0x38, 0x2f, 0x65, 0x24, 0x6d, 0x46, 0xd1,
	0x26, 0x36, 0xea, 0xca, 0x80, 0x22, 0x1f, 0xb8, 0x04, 0x72, 0x2e, 0xf3, 0xfc, 0x52, 0x76, 0x49,
	0x5b, 0xce, 0x1b, 0xff, 0x53, 0xbe, 0xb9, 0x3a, 0xf3, 0x7c, 0x24, 0x2d, 0x95, 0xdf, 0x32, 0xa0,
	0x50, 0x73, 0x5d, 0x9b, 0x9a, 0xd8, 0xa7, 0xcc, 0x81, 0x5f, 0x81, 0x71, 0xb1, 0x2a, 0x16, 0xf6,
	0xb1, 0xac, 0xb7, 0xb0, 0xfa, 0x81, 0x1e, 0x14, 0xa7, 0xc7, 0x57, 0x23, 0xda, 0x3c, 0xe1, 0xad,
	0x77, 0x56, 0xf4, 0x3b, 0xfb, 0x5f, 0x13, 0xd3, 0xdf, 0x22, 0x3e, 0x36, 0xa0, 0xca, 0x03, 0xa2,
	0x31, 0xd4, 0xa3, 0xc2, 0x06, 0xc8, 0x71, 0x97, 0x98, 0xb2, 0xfe, 0xc2, 0xea, 0x0d, 0xfd, 0x2c,
	0x52, 0xd1, 0x63, 0x25, 0xef, 0xb8, 0xc4, 0x8c, 0xa6, 0x26, 0xde, 0x90, 0x4c, 0x00, 0x19, 0x18,
	0xe5, 0x3e, 0xf6, 0xdb, 0x5c, 0x4e, 0xbf, 0xb0, 0x7a, 0xf3, 0xfc, 0xa9, 0x24, 0xce, 0x98, 0x54,
	0xc9, 0x46, 0x83, 0x77, 0xa4, 0xd2, 0x54, 0x7e, 0xd7, 0xc0, 0x54, 0xcc, 0x7b, 0x93, 0x72, 0x1f,
	0x3e, 0xe8, 0x5b, 0x4f, 0xfd, 0xe5, 0xd6, 0x53, 0x44, 0xcb, 0xd5, 0x9c, 0x0e, 0xf5, 0x12, 0x8e,
	0xc4, 0xd6, 0xf2, 0x00, 0xe4, 0xa9, 0x4f, 0x5a, 0x42, 0x0c, 0xd9, 0xe5, 0xc2, 0x6a, 0xed, 0xdc,
	0x33, 0x34, 0x8a, 0x2a, 0x5b, 0x7e, 0x43, 0x70, 0x51, 0x80, 0xaf, 0x1c, 0x67, 0x00, 0x8c, 0xaf,
	0x03, 0xe1, 0xfc, 0xf5, 0x88, 0xc5, 0x49, 0x88, 0x65, 0xf3, 0xfc, 0x3b, 0x18, 0x54, 0x3e, 0x54,
	0x33, 0x9d, 0x94, 0x66, 0xb6, 0x2f, 0x2c, 0xe3, 0xe9, 0xd2, 0xf9, 0x5b, 0x03, 0x97, 0xfa, 0x83,
	0x5e, 0x83, 0x82, 0x5a, 0x49, 0x05, 0xdd, 0xba, 0xa8, 0xf9, 0x0e, 0x11, 0xd2, 0x8f, 0xd9, 0x41,
	0xf3, 0x14, 0x1b, 0x00, 0x6b, 0x60, 0x0a, 0x47, 0x96, 0x6d, 0xdc, 0x22, 0xaa, 0x61, 0xce, 0x2a,
	0x52, 0xfc, 0x6c, 0x09, 0x33, 0x4a, 0xfb, 0xc3, 0x0f, 0x41, 0x81, 0x07, 0xc4, 0x75, 0xb1, 0x5a,
	0x41, 0x87, 0xfc, 0xbf, 0x0a, 0x2f, 0xec, 0x44, 0x26, 0x14, 0xf7, 0x83, 0x87, 0x60, 0xe1, 0x90,
	0xda, 0xf6, 0x86, 0xc3, 0x7d, 0xec, 0x98, 0xe4, 0x5e, 0x93, 0x84, 0x85, 0xad, 0xd9, 0x8c, 0x13,
	0x4b, 0x6a, 0x61, 0xdc, 0x78, 0x47, 0x81, 0x16, 0x6e, 0x9f, 0xe6, 0x8c, 0x4e, 0x67, 0xc1, 0x3d,
	0x30, 0x6b, 0x8a, 0xa7, 0x9b, 0x1e, 0x36, 0x49, 0x9d, 0x78, 0x94, 0x59, 0x3b, 0xc4, 0x64, 0x8e,
	0xc5, 0x4b, 0xb9, 0x25, 0x6d, 0xb9, 0x68, 0xcc, 0x77, 0x8f, 0x17, 0x67, 0xd7, 0x06, 0xbb, 0xa0,
	0x61, 0xb1, 0xf0, 0x33, 0x00, 0x99, 0x4b, 0x9c, 0x5d, 0xda, 0x22, 0xac, 0xed, 0x87, 0xc4, 0xbc,
	0x24, 0xce, 0xa9, 0xc2, 0xe1, 0x9d, 0x3e, 0x0f, 0x34, 0x20, 0xaa, 0xf2, 0x4f, 0x0e, 0x94, 0x86,
	0x29, 0x18, 0x7e, 0xab, 0x81, 0x29, 0x9c, 0xf8, 0xc6, 0xf1, 0x92, 0x26, 0xb5, 0xb3, 0x7e, 0x46,
	0xed, 0x24, 0x60, 0xb1, 0xdd, 0x4e, 0x26, 0x41, 0xe9, 0xac, 0x70, 0x13, 0x14, 0x79, 0xbc, 0x34,
	0xb5, 0xdf, 0x97, 0x15, 0xa0, 0x98, 0xa8, 0xfb, 0x24, 0x3d, 0x80, 0x92, 0xc1, 0xb0, 0x09, 0x26,
	0x4d, 0x9b, 0x12, 0xc7, 0x57, 0x5e, 0xa2, 0x03, 0x88, 0x59, 0x2d, 0xc7, 0x0e, 0x5b, 0xaf, 0xe6,
	0x4d, 0x66, 0x62, 0x3b, 0x68, 0x58, 0x88, 0x1c, 0x10, 0x8f, 0x38, 0x26, 0x31, 0x2e, 0xa9, 0xc4,
	0x93, 0x6b, 0x09, 0x0e, 0x4a, 0x71, 0xa1, 0x09, 0x8a, 0xb8, 0x83, 0xa9, 0x8d, 0xf7, 0x6d, 0x22,
	0x56, 0x5e, 0xee, 0x7b, 0x61, 0xf5, 0xbd, 0x97, 0x3b, 0xd5, 0x22, 0xc2, 0x98, 0x11, 0xf3, 0xab,
	0xc5, 0x21, 0x28, 0xc9, 0x84, 0xf7, 0xc0, 0x84, 0x94, 0x8a, 0x4c, 0x90, 0x7f, 0xe5, 0x04, 0x45,
	0x71, 0xa5, 0x58, 0x0b, 0x01, 0x28, 0x62, 0x09, 0xa1, 0x25, 0x32, 0x6d, 0x51, 0xd3, 0x63, 0xa5,
	0xd1, 0x25, 0x6d, 0x39, 0x1b, 0x09, 0xad, 0xd6, 0xe7, 0x81, 0x06, 0x44, 0x55, 0xbe, 0xcf, 0x25,
	0x3e, 0x98, 0xb2, 0x0d, 0xdc, 0x05, 0xc0, 0x64, 0x8e, 0x8f, 0x45, 0x75, 0xa1, 0xb2, 0x16, 0x06,
	0xed, 0xc1, 0x5a, 0xe8, 0x15, 0x7d, 0x42, 0x7a, 0x43, 0x1c, 0xc5, 0x20, 0xf0, 0x0b, 0x30, 0x2b,
	0x24, 0xd9, 0xd8, 0x66, 0x16, 0x09, 0x35, 0x40, 0xbc, 0x0e, 0x35, 0x89, 0x94, 0xcc, 0xb8, 0xb1,
	0xa8, 0x00, 0xb3, 0x7b, 0x83, 0xdd, 0xd0, 0xb0, 0x78, 0xf8, 0x9d, 0x26, 0xcb, 0x3d, 0xa0, 0x0d,
	0xd9, 0x71, 0x02, 0xc9, 0xec, 0x5d, 0xc8, 0x9d, 0x46, 0x4c, 0x50, 0x71, 0x6f, 0x38, 0xbe, 0x77,
	0x94, 0x98, 0xa6, 0x32, 0xa0, 0x58, 0x72, 0xf8, 0x44, 0x03, 0x45, 0x6e, 0x62, 0x9b, 0x3a, 0x8d,
	0x3a, 0xb3, 0xa9, 0x79, 0xa4, 0x84, 0xb5, 0x76, 0xb6, 0x72, 0x76, 0xe2, 0x28, 0xe3, 0xcd, 0xde,
	0xa9, 0x8a, 0x0f, 0xa3, 0x64, 0xc2, 0xb9, 0x4f, 0xc0, 0x54, 0xaa, 0x6a, 0x38, 0x0d, 0xb2, 0x87,
	0xe4, 0x28, 0x68, 0xe5, 0x48, 0x3c, 0xc2, 0x37, 0x40, 0xbe, 0x83, 0xed, 0x76, 0xb0, 0xf8, 0x13,
	0x28, 0x78, 0xb9, 0x9e, 0xb9, 0xa6, 0x55, 0x7e, 0xce, 0x83, 0x99, 0xbe, 0xeb, 0x16, 0x5c, 0x07,
	0xd3, 0x16, 0xe1, 0xd4, 0x23, 0x56, 0xd8, 0x55, 0xb9, 0xc4, 0xe5, 0x8d, 0x92, 0x2a, 0x6a, 0x7a,
	0x3d, 0x65, 0x47, 0x7d, 0x11, 0xf0, 0x53, 0x30, 0xe9, 0x33, 0x1f, 0xdb, 0x11, 0x23, 0x23, 0x19,
	0xbd, 0x53, 0xbb, 0x9b, 0xb0, 0xa2, 0x94, 0xb7, 0xa8, 0xc2, 0x25, 0x8e, 0x45, 0x9d, 0x46, 0x44,
	0xc8, 0x26, 0xab, 0xa8, 0xa7, 0xec, 0xa8, 0x2f, 0x02, 0xde, 0x04, 0x33, 0x16, 0xb1, 0x89, 0x9f,
	0xc0, 0xe4, 0x24, 0xe6, 0x2d, 0x85, 0x99, 0x59, 0x4f, 0x3b, 0xa0, 0xfe, 0x18, 0x79, 0x0c, 0x6d,
	0x9b, 0x99, 0xe2, 0xd7, 0x47, 0x44, 0xca, 0x4b, 0x52, 0x74, 0x0c, 0xfb, 0x3c, 0xd0, 0x80, 0x28,
	0xf8, 0x31, 0x28, 0x52, 0xcb, 0x26, 0x11, 0x66, 0x54, 0x62, 0x7a, 0x5b, 0xbe, 0x11, 0x37, 0xa2,
	0xa4, 0x2f, 0xfc, 0x46, 0x03, 0x45, 0x1b, 0xfb, 0x84, 0xfb, 0xb7, 0x28, 0xf7, 0x99, 0x77, 0x54,
	0x1a, 0x3b, 0xcf, 0x6d, 0x7b, 0x9d, 0xb8, 0x36, 0x3b, 0x6a, 0x11, 0x27, 0xc4, 0x45, 0x65, 0x6c,
	0xc6, 0xb3, 0xa0, 0x64, 0x52, 0xe8, 0x81, 0xb1, 0xa6, 0xca, 0x3f, 0x2e, 0x0f, 0xe1, 0x85, 0xe5,
	0x9f, 0x52, 0xf9, 0xc7, 0xc2, 0xcc, 0x61, 0xa2, 0xca, 0x1f, 0x19, 0x30, 0xd3, 0xe7, 0x0f, 0xaf,
	0x83, 0x51, 0x6c, 0x0a, 0xf9, 0xaa, 0xeb, 0x4b, 0x25, 0xbc, 0xf2, 0xd5, 0xe4, 0xe8, 0x89, 0x94,
	0x6b, 0x18, 0x14, 0x8c, 0x21, 0x15, 0x01, 0x1f, 0x02, 0xd0, 0x76, 0x2d, 0xec, 0x07, 0x6d, 0x3b,
	0xf3, 0xca, 0x6d, 0xbb, 0xd7, 0x22, 0xf6, 0x7a, 0x14, 0x14, 0x23, 0xc2, 0xcb, 0x60, 0xd4, 0x23,
	0x98, 0x33, 0x47, 0x4a, 0x77, 0x22, 0xba, 0x8e, 0x22, 0x39, 0x8a, 0x94, 0x15, 0xbe, 0x0b, 0xc6,
	0x5a, 0x84, 0x73, 0xdc, 0x08, 0x3e, 0x4e, 0x13, 0xd1, 0x22, 0x6c, 0x05, 0xc3, 0x28, 0xb4, 0xc3,
	0xcf, 0xc5, 0xe9, 0x0c, 0xa7, 0xa3, 0x3e, 0xc4, 0x79, 0x19, 0xf3, 0x7e, 0x74, 0x3a, 0x93, 0xf6,
	0x93, 0x01, 0x63, 0xa8, 0x8f, 0x52, 0xb9, 0x0f, 0x66, 0x37, 0x2c, 0x62, 0xab, 0x8e, 0xbb, 0xdd,
	0x6e, 0xed, 0x36, 0x3d, 0xc2, 0x9b, 0xcc, 0xb6, 0xc4, 0xef, 0xda, 0x26, 0x6d, 0x34, 0xe5, 0x0a,
	0x17, 0xa3, 0x8b, 0xfc, 0x2d, 0xda, 0x68, 0x22, 0x69, 0x81, 0x0b, 0x20, 0x6b, 0xb3, 0x47, 0x72,
	0x09, 0x8b, 0x46, 0x41, 0x39, 0x64, 0x37, 0xd9, 0x23, 0x24, 0xc6, 0x2b, 0x0f, 0xc1, 0x7c, 0x8c,
	0x5d, 0x27, 0x9e, 0x10, 0xcb, 0x05, 0xf2, 0xff, 0xcd, 0x81, 0x64, 0xa7, 0x14, 0xd7, 0xdb, 0x16,
	0x75, 0x68, 0xab, 0xdd, 0x0a, 0xcf, 0x8e, 0xa2, 0xf7, 0x2e, 0x3c, 0x5b, 0x49, 0x33, 0x4a, 0xfb,
	0x4b, 0x04, 0x7e, 0x9c, 0x40, 0x64, 0x52, 0x88, 0xa4, 0x19, 0xa5, 0xfd, 0xe1, 0xdb, 0x20, 0xbf,
	0xdf, 0xf6, 0x78, 0xf0, 0x8f, 0x40, 0x31, 0xba, 0xa4, 0x1b, 0x62, 0x10, 0x05, 0x36, 0xf8, 0x00,
	0xcc, 0x24, 0xda, 0xfa, 0xee, 0x91, 0x1b, 0xea, 0x40, 0x0f, 0x9b, 0xd4, 0x4e, 0xda, 0xe1, 0x64,
	0xd0, 0x20, 0xea, 0x07, 0xc1, 0x9f, 0x34, 0x30, 0x2b, 0x5a, 0xc8, 0x80, 0x7d, 0x55, 0x17, 0x95,
	0xad, 0xb3, 0x1d, 0xdd, 0x21, 0x62, 0x09, 0x2e, 0xd4, 0x1b, 0x83, 0x33, 0xa2, 0x61, 0xa5, 0xc0,
	0x5f, 0x35, 0x30, 0x1f, 0xb3, 0xa5, 0x25, 0x22, 0x7b, 0x64, 0x61, 0xf5, 0xee, 0xb9, 0x4b, 0x4d,
	0x83, 0x8d, 0xc5, 0xee, 0xf1, 0xe2, 0xfc, 0xc6, 0xf0, 0xcc, 0xe8, 0xb4, 0xb2, 0x8c, 0xe5, 0xa7,
	0x2f, 0xca, 0x23, 0xcf, 0x5e, 0x94, 0x47, 0x9e, 0xbf, 0x28, 0x8f, 0x3c, 0xe9, 0x96, 0xb5, 0xa7,
	0xdd, 0xb2, 0xf6, 0xac, 0x5b, 0xd6, 0x9e, 0x77, 0xcb, 0xda, 0x9f, 0xdd, 0xb2, 0xf6, 0xc3, 0x5f,
	0xe5, 0x91, 0xfb, 0x99, 0xce, 0xca, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x15, 0x4f, 0xf6, 0x9f,
	0xea, 0x13, 0x00, 0x00,
}

func (m *AccessEndPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessEndPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessEndPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x18
	i -= len(m.IPAddress)
	copy(dAtA[i:], m.IPAddress)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IPAddress)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Protocol)
	copy(dAtA[i:], m.Protocol)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Protocol)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSessionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSessionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationSessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSessionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSessionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.OpenTimeoutSeconds))
	i--
	dAtA[i] = 0x28
	if m.CloseGracePeriodSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.CloseGracePeriodSeconds))
		i--
		dAtA[i] = 0x20
	}
	i--
	if m.KillInstanceWhenSessionClosed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.SessionData)
	copy(dAtA[i:], m.SessionData)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionData)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ApplicationName)
	copy(dAtA[i:], m.ApplicationName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ApplicationName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ApplicationSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSessionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.AvailableTimeMicro))
	i--
	dAtA[i] = 0x30
	if m.CloseTime != nil {
		{
			size, err := m.CloseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AvailableTime != nil {
		{
			size, err := m.AvailableTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientSessions) > 0 {
		for iNdEx := len(m.ClientSessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClientSessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.SessionStatus)
	copy(dAtA[i:], m.SessionStatus)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionStatus)))
	i--
	dAtA[i] = 0x12
	if len(m.AccessEndPoints) > 0 {
		for iNdEx := len(m.AccessEndPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessEndPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ScalingPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ConfigData) > 0 {
		keysForConfigData := make([]string, 0, len(m.ConfigData))
		for k := range m.ConfigData {
			keysForConfigData = append(keysForConfigData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForConfigData)
		for iNdEx := len(keysForConfigData) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ConfigData[string(keysForConfigData[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForConfigData[iNdEx])
			copy(dAtA[i:], keysForConfigData[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForConfigData[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	i--
	if m.UsingNodeSessionService {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.Containers) > 0 {
		for iNdEx := len(m.Containers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Containers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.LatestHistory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	i = encodeVarintGenerated(dAtA, i, uint64(m.IdleInstances))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.AllocatedInstances))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.DeletingInstances))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.PendingInstances))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.TotalInstances))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.DesiredInstances))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DeploymentHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DeploymentStatus)
	copy(dAtA[i:], m.DeploymentStatus)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DeploymentStatus)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.UpdateTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Action)
	copy(dAtA[i:], m.Action)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Action)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IdelSessionNumThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdelSessionNumThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdelSessionNumThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Low))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.High))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IdelSessionPercentThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdelSessionPercentThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdelSessionPercentThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Low))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.High))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScalingPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalingPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalingPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdleSessionPercentThreshold != nil {
		{
			size, err := m.IdleSessionPercentThreshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IdleSessionNumThreshold != nil {
		{
			size, err := m.IdleSessionNumThreshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i -= len(m.ScalingPolicyType)
	copy(dAtA[i:], m.ScalingPolicyType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ScalingPolicyType)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.Burst))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaximumInstance))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinimumInstance))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccessEndPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Protocol)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IPAddress)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Port))
	return n
}

func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ApplicationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ApplicationSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ApplicationSessionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ApplicationSessionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SessionData)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if m.CloseGracePeriodSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.CloseGracePeriodSeconds))
	}
	n += 1 + sovGenerated(uint64(m.OpenTimeoutSeconds))
	return n
}

func (m *ApplicationSessionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessEndPoints) > 0 {
		for _, e := range m.AccessEndPoints {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.SessionStatus)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ClientSessions) > 0 {
		for _, e := range m.ClientSessions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.AvailableTime != nil {
		l = m.AvailableTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CloseTime != nil {
		l = m.CloseTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.AvailableTimeMicro))
	return n
}

func (m *ApplicationSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	if len(m.ConfigData) > 0 {
		for k, v := range m.ConfigData {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.ScalingPolicy.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ApplicationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.DesiredInstances))
	n += 1 + sovGenerated(uint64(m.TotalInstances))
	n += 1 + sovGenerated(uint64(m.PendingInstances))
	n += 1 + sovGenerated(uint64(m.DeletingInstances))
	n += 1 + sovGenerated(uint64(m.AllocatedInstances))
	n += 1 + sovGenerated(uint64(m.IdleInstances))
	l = m.LatestHistory.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *DeploymentHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.UpdateTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DeploymentStatus)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *IdelSessionNumThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.High))
	n += 1 + sovGenerated(uint64(m.Low))
	return n
}

func (m *IdelSessionPercentThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.High))
	n += 1 + sovGenerated(uint64(m.Low))
	return n
}

func (m *ScalingPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.MinimumInstance))
	n += 1 + sovGenerated(uint64(m.MaximumInstance))
	n += 1 + sovGenerated(uint64(m.Burst))
	l = len(m.ScalingPolicyType)
	n += 1 + l + sovGenerated(uint64(l))
	if m.IdleSessionNumThreshold != nil {
		l = m.IdleSessionNumThreshold.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.IdleSessionPercentThreshold != nil {
		l = m.IdleSessionPercentThreshold.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AccessEndPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessEndPoint{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Application) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Application{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ApplicationSpec", "ApplicationSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ApplicationStatus", "ApplicationStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Application{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Application", "Application", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ApplicationList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationSession{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ApplicationSessionSpec", "ApplicationSessionSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ApplicationSessionStatus", "ApplicationSessionStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationSessionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]ApplicationSession{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "ApplicationSession", "ApplicationSession", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ApplicationSessionList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationSessionSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationSessionSpec{`,
		`ApplicationName:` + fmt.Sprintf("%v", this.ApplicationName) + `,`,
		`SessionData:` + fmt.Sprintf("%v", this.SessionData) + `,`,
		`KillInstanceWhenSessionClosed:` + fmt.Sprintf("%v", this.KillInstanceWhenSessionClosed) + `,`,
		`CloseGracePeriodSeconds:` + valueToStringGenerated(this.CloseGracePeriodSeconds) + `,`,
		`OpenTimeoutSeconds:` + fmt.Sprintf("%v", this.OpenTimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationSessionStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAccessEndPoints := "[]AccessEndPoint{"
	for _, f := range this.AccessEndPoints {
		repeatedStringForAccessEndPoints += strings.Replace(strings.Replace(f.String(), "AccessEndPoint", "AccessEndPoint", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAccessEndPoints += "}"
	repeatedStringForClientSessions := "[]LocalObjectReference{"
	for _, f := range this.ClientSessions {
		repeatedStringForClientSessions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForClientSessions += "}"
	s := strings.Join([]string{`&ApplicationSessionStatus{`,
		`AccessEndPoints:` + repeatedStringForAccessEndPoints + `,`,
		`SessionStatus:` + fmt.Sprintf("%v", this.SessionStatus) + `,`,
		`ClientSessions:` + repeatedStringForClientSessions + `,`,
		`AvailableTime:` + strings.Replace(fmt.Sprintf("%v", this.AvailableTime), "Time", "v1.Time", 1) + `,`,
		`CloseTime:` + strings.Replace(fmt.Sprintf("%v", this.CloseTime), "Time", "v1.Time", 1) + `,`,
		`AvailableTimeMicro:` + fmt.Sprintf("%v", this.AvailableTimeMicro) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContainers := "[]Container{"
	for _, f := range this.Containers {
		repeatedStringForContainers += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForContainers += "}"
	keysForConfigData := make([]string, 0, len(this.ConfigData))
	for k := range this.ConfigData {
		keysForConfigData = append(keysForConfigData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfigData)
	mapStringForConfigData := "map[string]string{"
	for _, k := range keysForConfigData {
		mapStringForConfigData += fmt.Sprintf("%v: %v,", k, this.ConfigData[k])
	}
	mapStringForConfigData += "}"
	s := strings.Join([]string{`&ApplicationSpec{`,
		`Containers:` + repeatedStringForContainers + `,`,
		`UsingNodeSessionService:` + fmt.Sprintf("%v", this.UsingNodeSessionService) + `,`,
		`ConfigData:` + mapStringForConfigData + `,`,
		`ScalingPolicy:` + strings.Replace(strings.Replace(this.ScalingPolicy.String(), "ScalingPolicy", "ScalingPolicy", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistory := "[]DeploymentHistory{"
	for _, f := range this.History {
		repeatedStringForHistory += strings.Replace(strings.Replace(f.String(), "DeploymentHistory", "DeploymentHistory", 1), `&`, ``, 1) + ","
	}
	repeatedStringForHistory += "}"
	s := strings.Join([]string{`&ApplicationStatus{`,
		`DesiredInstances:` + fmt.Sprintf("%v", this.DesiredInstances) + `,`,
		`TotalInstances:` + fmt.Sprintf("%v", this.TotalInstances) + `,`,
		`PendingInstances:` + fmt.Sprintf("%v", this.PendingInstances) + `,`,
		`DeletingInstances:` + fmt.Sprintf("%v", this.DeletingInstances) + `,`,
		`AllocatedInstances:` + fmt.Sprintf("%v", this.AllocatedInstances) + `,`,
		`IdleInstances:` + fmt.Sprintf("%v", this.IdleInstances) + `,`,
		`LatestHistory:` + strings.Replace(strings.Replace(this.LatestHistory.String(), "DeploymentHistory", "DeploymentHistory", 1), `&`, ``, 1) + `,`,
		`History:` + repeatedStringForHistory + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentHistory{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`UpdateTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdateTime), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`DeploymentStatus:` + fmt.Sprintf("%v", this.DeploymentStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IdelSessionNumThreshold) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IdelSessionNumThreshold{`,
		`High:` + fmt.Sprintf("%v", this.High) + `,`,
		`Low:` + fmt.Sprintf("%v", this.Low) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IdelSessionPercentThreshold) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IdelSessionPercentThreshold{`,
		`High:` + fmt.Sprintf("%v", this.High) + `,`,
		`Low:` + fmt.Sprintf("%v", this.Low) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalingPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalingPolicy{`,
		`MinimumInstance:` + fmt.Sprintf("%v", this.MinimumInstance) + `,`,
		`MaximumInstance:` + fmt.Sprintf("%v", this.MaximumInstance) + `,`,
		`Burst:` + fmt.Sprintf("%v", this.Burst) + `,`,
		`ScalingPolicyType:` + fmt.Sprintf("%v", this.ScalingPolicyType) + `,`,
		`IdleSessionNumThreshold:` + strings.Replace(this.IdleSessionNumThreshold.String(), "IdelSessionNumThreshold", "IdelSessionNumThreshold", 1) + `,`,
		`IdleSessionPercentThreshold:` + strings.Replace(this.IdleSessionPercentThreshold.String(), "IdelSessionPercentThreshold", "IdelSessionPercentThreshold", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AccessEndPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessEndPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessEndPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = k8s_io_api_core_v1.Protocol(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Application{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, ApplicationSession{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillInstanceWhenSessionClosed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KillInstanceWhenSessionClosed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseGracePeriodSeconds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseGracePeriodSeconds = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTimeoutSeconds", wireType)
			}
			m.OpenTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTimeoutSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessEndPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessEndPoints = append(m.AccessEndPoints, AccessEndPoint{})
			if err := m.AccessEndPoints[len(m.AccessEndPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionStatus = SessionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSessions = append(m.ClientSessions, v11.LocalObjectReference{})
			if err := m.ClientSessions[len(m.ClientSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailableTime == nil {
				m.AvailableTime = &v1.Time{}
			}
			if err := m.AvailableTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTime == nil {
				m.CloseTime = &v1.Time{}
			}
			if err := m.CloseTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTimeMicro", wireType)
			}
			m.AvailableTimeMicro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableTimeMicro |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, v11.Container{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsingNodeSessionService", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsingNodeSessionService = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigData == nil {
				m.ConfigData = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConfigData[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScalingPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredInstances", wireType)
			}
			m.DesiredInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInstances", wireType)
			}
			m.TotalInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingInstances", wireType)
			}
			m.PendingInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletingInstances", wireType)
			}
			m.DeletingInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletingInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedInstances", wireType)
			}
			m.AllocatedInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleInstances", wireType)
			}
			m.IdleInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, DeploymentHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = DeploymentAction(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentStatus = DeploymentStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdelSessionNumThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdelSessionNumThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdelSessionNumThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdelSessionPercentThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdelSessionPercentThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdelSessionPercentThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalingPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalingPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalingPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumInstance", wireType)
			}
			m.MinimumInstance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumInstance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumInstance", wireType)
			}
			m.MaximumInstance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumInstance |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingPolicyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScalingPolicyType = ScalingPolicyType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleSessionNumThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdleSessionNumThreshold == nil {
				m.IdleSessionNumThreshold = &IdelSessionNumThreshold{}
			}
			if err := m.IdleSessionNumThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleSessionPercentThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdleSessionPercentThreshold == nil {
				m.IdleSessionPercentThreshold = &IdelSessionPercentThreshold{}
			}
			if err := m.IdleSessionPercentThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
