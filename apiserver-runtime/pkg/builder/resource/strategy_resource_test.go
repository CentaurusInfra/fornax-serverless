/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package resource_test

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/util/validation/field"
	"sigs.k8s.io/apiserver-runtime/pkg/builder"
	"sigs.k8s.io/apiserver-runtime/pkg/builder/resource/resourcestrategy"
)

func ExampleObject_withStrategy() {
	// register this resource using the default etcd storage under
	// https://APISERVER_HOST:APISERVER_PORT/apis/sample.k8s.com/v1alpha1/namespaces/NAMESPACE/examples/NAME,
	// invoking the strategy functions before handling or storing the object.
	builder.APIServer.WithResource(&ExampleResourceWithStrategy{})
}

// ExampleResourceWithHandler defines a resource and implements its request handler functions
type ExampleResourceWithStrategy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
}

// ExampleResourceWithHandlerList contains a list of ExampleResourceWithHandler objects
type ExampleResourceWithStrategyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`

	Items []ExampleResourceWithStrategy `json:"items" protobuf:"bytes,2,rep,name=items"`
}

var _ resourcestrategy.Defaulter = &ExampleResourceWithStrategy{}

func (e ExampleResourceWithStrategy) Default() {
	// set defaults here
}

var _ resourcestrategy.Validater = &ExampleResourceWithStrategy{}
var _ resourcestrategy.ValidateUpdater = &ExampleResourceWithStrategy{}

func (e ExampleResourceWithStrategy) Validate(ctx context.Context) field.ErrorList {
	// implement validation here
	return nil
}

func (e ExampleResourceWithStrategy) ValidateUpdate(ctx context.Context, obj runtime.Object) field.ErrorList {
	// implement validation here
	return nil
}

// ExampleResourceWithHandler is required by apimachinery and implemented by deepcopy-gen
func (e ExampleResourceWithStrategy) DeepCopyObject() runtime.Object {
	// generated by deepcopy-gen
	panic("implement me")
}

// GetObjectMeta returns the ObjectMeta for the object
func (e ExampleResourceWithStrategy) GetObjectMeta() *metav1.ObjectMeta {
	return &e.ObjectMeta
}

// NamespaceScoped returns true to register ExampleResource as a namespaced resource
func (e ExampleResourceWithStrategy) NamespaceScoped() bool {
	return true
}

// New returns a new instance of the object for this resource.
func (e ExampleResourceWithStrategy) New() runtime.Object {
	return &ExampleResource{}
}

// NewList returns a new instance of the list object for this resource.
func (e ExampleResourceWithStrategy) NewList() runtime.Object {
	return &ExampleResourceList{}
}

// GetGroupVersionResource returns the GroupVersionResource for this type.
func (e ExampleResourceWithStrategy) GetGroupVersionResource() schema.GroupVersionResource {
	return SchemeGroupVersion.WithResource("examplewithstrategies")
}

// IsStorageVersion returns true for the resource version used as the storage version.
func (e ExampleResourceWithStrategy) IsStorageVersion() bool {
	return true
}

// DeepCopyObject is required by apimachinery and generated by deepcopy-gen.
func (e *ExampleResourceWithStrategyList) DeepCopyObject() runtime.Object {
	// generated by deepcopy-gen
	return e
}
