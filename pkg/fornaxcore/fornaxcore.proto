/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto2";
package centaurusinfra.io.fornaxcore.service;

option go_package = "centaurusinfra.io/fornax-serverless/pkg/fornaxcore/grpc";

import "google/protobuf/empty.proto";
import "k8s.io/api/core/v1/generated.proto";

service FornaxCoreService {
  rpc getMessage(NodeIdentifier) returns (stream FornaxCoreMessage);
  rpc putMessage(FornaxCoreMessage) returns (google.protobuf.Empty);
}

enum MessageType {
    UNSPECIFIED = 0;
    FORNAX_CORE_CONFIGURATION = 100;
    NODE_CONFIGURATION = 200;
    NODE_REGISTER = 201;
    NODE_READY = 202;
    NODE_STATE = 203;
    NODE_FULL_SYNC = 204;
    POD_CREATE = 300;
    POD_TERMINATE = 301;
    POD_ACTIVE = 302;
    POD_STATE = 303;
    SESSION_START = 400;
    SESSION_CLOSE = 401;
    SESSION_STATE = 402;
}
 
message FornaxCoreMessage {
  required string messageIdentifier = 1;
  required NodeIdentifier nodeIdentifier = 2;
  required MessageType messageType = 3;
  oneof MessageBody {
    FornaxCoreConfiguration fornaxCoreConfiguration = 100;
    NodeConfiguration nodeConfiguration = 200;
    NodeRegistry nodeRegistry = 201;
    NodeReady nodeReady = 202;
    NodeState nodeState= 203;
    NodeFullSync nodeFullSync = 204;
    PodCreate podCreate = 300;
    PodTerminate podTerminate = 301;
    PodActive podActive = 302;
    PodState podState = 303;
    SessionStart sessionStart = 400;
    SessionClose sessionClose = 401;
    SessionState sessionState = 402;
  }
}

message FornaxCore {
  required string ip = 1;
  required string identifier = 2;
}

message FornaxCoreConfiguration {
  required FornaxCore primary = 1;
  repeated FornaxCore standbys = 2;
}

message NodeIdentifier {
  required string ip = 1;
  required string identifier = 2;
}

/* node register with fornax core, wait for a configuration message to initialize it*/
message NodeRegistry {
  required int64 nodeRevision = 1;
  required k8s.io.api.core.v1.Node node = 2;
}

/* fornax core send node configuration to node to initialize using this configuration before tell fornax it's ready*/
message NodeConfiguration {
  required string clusterDomain = 1;
  required k8s.io.api.core.v1.Node node = 2;
  repeated k8s.io.api.core.v1.Pod daemonPods = 3;
}

/* node report back to fornax core, it's ready for take pod*/
message NodeReady {
  required int64 nodeRevision = 1;
  required k8s.io.api.core.v1.Node node = 2;
  repeated PodState podStates = 3;
  repeated SessionState sessionStates = 4;
}

/* node report back full state to fornax core*/
message NodeState {
  required int64 nodeRevision = 1;
  required k8s.io.api.core.v1.Node node = 2;
  repeated PodState podStates = 3;
  repeated SessionState sessionStates = 4;
}

/* fornax core ask node to send its full state if node revision are not same between fornax core and node*/
message NodeFullSync {}

message PodState {
  required int64 nodeRevision = 1;
  enum State {
    Creating = 0;
    Standby = 10;
    Activating = 20;
    Running = 30;
    Evacuating = 40;
    Terminating = 50;
    Terminated = 60;
  }
  required State state = 2;
  required k8s.io.api.core.v1.Pod pod = 3;
  optional PodResource resource = 4;
}

message PodResource {
  optional k8s.io.api.core.v1.ResourceQuotaStatus resourceQuotaStatus = 1;
  repeated k8s.io.api.core.v1.AttachedVolume volumes = 2;
}

message PodCreate {
  required string podIdentifier = 1;
  enum CreateMode {
    Active = 0;
    Standby = 10;
  }
  required CreateMode mode = 2;
  required k8s.io.api.core.v1.Pod pod = 3;
  optional k8s.io.api.core.v1.ConfigMap configMap = 4;
}

message  PodTerminate {
  required string podIdentifier = 1;
}

message  PodActive {
  required string podIdentifier = 1;
}

message SessionState {
  required string sessionIdentifier = 1;
  required string podIdentifier = 2;
  required string appIdentifier = 3;
  enum State {
    Starting = 0;
    Ready = 10;
    Live = 20;
    Evacuating = 30;
    Terminating = 40;
    Terminated = 50;
  }
  required State state = 4;
}

message SessionStart {
  required string sessionIdentifier = 1;
  required string podIdentifier = 2;
  required string appIdentifier = 3;
  required string sessionData = 4;
}

message SessionClose {
  required string sessionIdentifier = 1;
  required string podIdentifier = 2;
  required string appIdentifier = 3;
}
