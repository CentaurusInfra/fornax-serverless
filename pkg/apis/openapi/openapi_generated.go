//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Application":               schema_pkg_apis_core_v1_Application(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstance":       schema_pkg_apis_core_v1_ApplicationInstance(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceList":   schema_pkg_apis_core_v1_ApplicationInstanceList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceSpec":   schema_pkg_apis_core_v1_ApplicationInstanceSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceStatus": schema_pkg_apis_core_v1_ApplicationInstanceStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationList":           schema_pkg_apis_core_v1_ApplicationList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSession":        schema_pkg_apis_core_v1_ApplicationSession(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionList":    schema_pkg_apis_core_v1_ApplicationSessionList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionSpec":    schema_pkg_apis_core_v1_ApplicationSessionSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionStatus":  schema_pkg_apis_core_v1_ApplicationSessionStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSpec":           schema_pkg_apis_core_v1_ApplicationSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationStatus":         schema_pkg_apis_core_v1_ApplicationStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSession":             schema_pkg_apis_core_v1_ClientSession(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionList":         schema_pkg_apis_core_v1_ClientSessionList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionSpec":         schema_pkg_apis_core_v1_ClientSessionSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionStatus":       schema_pkg_apis_core_v1_ClientSessionStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory":         schema_pkg_apis_core_v1_DeploymentHistory(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Destination":               schema_pkg_apis_core_v1_Destination(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpoint":           schema_pkg_apis_core_v1_IngressEndpoint(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointHistory":    schema_pkg_apis_core_v1_IngressEndpointHistory(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointList":       schema_pkg_apis_core_v1_IngressEndpointList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointSpec":       schema_pkg_apis_core_v1_IngressEndpointSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointStatus":     schema_pkg_apis_core_v1_IngressEndpointStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.InstanceHistory":           schema_pkg_apis_core_v1_InstanceHistory(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.NetworkInterface":          schema_pkg_apis_core_v1_NetworkInterface(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.SessionConfig":             schema_pkg_apis_core_v1_SessionConfig(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.SessionHistory":            schema_pkg_apis_core_v1_SessionHistory(ref),
	}
}

func schema_pkg_apis_core_v1_Application(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationInstance(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationInstance",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstanceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationInstanceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationInstanceList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstance"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationInstance", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationInstanceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationInstanceSpec defines the desired state of ApplicationInstance",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Description: "InstanceName",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applicationName": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationName",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_ApplicationInstanceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationInstanceStatus defines the observed state of ApplicationInstance",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"history": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "updateTime",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "instance history, including pod and endpoint history",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.InstanceHistory"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.InstanceHistory"},
	}
}

func schema_pkg_apis_core_v1_ApplicationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Application"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Application", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSession(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSessionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSessionList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSession"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSession", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSessionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSessionSpec defines the desired state of ApplicationSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"sessionName": {
						SchemaProps: spec.SchemaProps{
							Description: "SessionName, client provided idemponency token",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sessionData": {
						SchemaProps: spec.SchemaProps{
							Description: "Session data is a base64 string pass through into application instances when session started",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_ApplicationSessionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSessionStatus defines the observed state of ApplicationSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ingressEndpointReference": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint this session is using",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"sessionStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Session status, is Starting, Available or Closed.\n\nPossible enum values:\n - `\"Available\"` session is available to instance, no client session yet\n - `\"Closed\"` session is dead, no heartbeat\n - `\"Starting\"` session is allocated to instance, at least one client join",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"Available", "Closed", "Starting"}},
					},
					"history": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "updateTime",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a deployment's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.SessionHistory"),
									},
								},
							},
						},
					},
					"clientSessions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.SessionHistory", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSpec defines the desired state of Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"container": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime image and resource requirement of a application container",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.Container"),
						},
					},
					"configData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 base64 string of byte sequences",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"workingMode": {
						SchemaProps: spec.SchemaProps{
							Description: "The application working mode, control how ingress port is created\n\nPossible enum values:\n - `\"Service\"` instances of application exposed as a service\n - `\"Standlone\"` instances of application exposed independently",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"Service", "Standlone"}},
					},
					"sessionConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "application session config",
							Default:     map[string]interface{}{},
							Ref:         ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.SessionConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.SessionConfig", "k8s.io/api/core/v1.Container"},
	}
}

func schema_pkg_apis_core_v1_ApplicationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationStatus defines the observed state of Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"desiredInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"availableInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of available instances (ready for at least minReadySeconds) targeted by this deployment.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"deploymentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "DeploymentStatus of Last History",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The first time this app was deployed.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"history": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "updateTime",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a deployment's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_core_v1_ClientSession(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClientSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSessionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_ClientSessionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClientSessionList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSession"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ClientSession", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_ClientSessionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClientSessionSpec defines the desired state of ClientSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clientData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_ClientSessionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClientSessionStatus defines the observed state of ClientSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"sessionCondition": {
						SchemaProps: spec.SchemaProps{
							Description: "\n\n\nPossible enum values:\n - `\"active\"` session is allocated\n - `\"expired\"` session is available for use",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"active", "expired"}},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_DeploymentHistory(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of deployment condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this deployment was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceReference": {
						SchemaProps: spec.SchemaProps{
							Description: "which instance this history is about",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_core_v1_Destination(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_IngressEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IngressEndpoint",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_IngressEndpointHistory(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIServiceCondition describes conditions for an APIService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "action on this ingress endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique, one-word, CamelCase reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human-readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_core_v1_IngressEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IngressEndpointList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpoint"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpoint", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_IngressEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IngressEndpointSpec defines the desired state of IngressEndpoint",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "TCP/UDP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ingressGWIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "is port application is accessible from ingress gateway",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ingressPort": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressPort is port application is accessible from ingress gateway",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"destinations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "destination application instances",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Destination"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Destination"},
	}
}

func schema_pkg_apis_core_v1_IngressEndpointStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IngressEndpointAction defines the observed state of IngressEndpoint",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serviceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the status of the condition. Can be InUse, Idle, Unavailable",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"history": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "updateTime",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "history record of this endpoint",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointHistory"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IngressEndpointHistory"},
	}
}

func schema_pkg_apis_core_v1_InstanceHistory(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"podReference": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of deployment condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this instance was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_core_v1_NetworkInterface(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "ip addresss allocated to instance, it's affinity ip until end of life of this instance, pods of a instance use this ip",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpc": {
						SchemaProps: spec.SchemaProps{
							Description: "vpc id",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_SessionConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Spec to control the application ingress endpoints",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"minSessions": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of application instances that must keep running",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSessions": {
						SchemaProps: spec.SchemaProps{
							Description: "how many sessions can a application instance hold",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of application session that can be scheduled above the desired number",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"minOfIdleSessions": {
						SchemaProps: spec.SchemaProps{
							Description: "scaling when idle session less than this number",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"numOfSessionOfInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "how many sessions can a application instance hold",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_SessionHistory(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clientSession": {
						SchemaProps: spec.SchemaProps{
							Description: "client session",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this deployment was updated.\n\nPossible enum values:\n - `\"ClientExit\"` client session exit\n - `\"ClientJoin\"` client session join",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"ClientExit", "ClientJoin"}},
					},
					"updateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this deployment was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
