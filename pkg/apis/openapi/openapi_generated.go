//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 The fornax-serverless Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.AccessEndPoint":              schema_pkg_apis_core_v1_AccessEndPoint(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Application":                 schema_pkg_apis_core_v1_Application(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationList":             schema_pkg_apis_core_v1_ApplicationList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSession":          schema_pkg_apis_core_v1_ApplicationSession(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionList":      schema_pkg_apis_core_v1_ApplicationSessionList(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionSpec":      schema_pkg_apis_core_v1_ApplicationSessionSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionStatus":    schema_pkg_apis_core_v1_ApplicationSessionStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSpec":             schema_pkg_apis_core_v1_ApplicationSpec(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationStatus":           schema_pkg_apis_core_v1_ApplicationStatus(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory":           schema_pkg_apis_core_v1_DeploymentHistory(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IdelSessionNumThreshold":     schema_pkg_apis_core_v1_IdelSessionNumThreshold(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IdelSessionPercentThreshold": schema_pkg_apis_core_v1_IdelSessionPercentThreshold(ref),
		"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ScalingPolicy":               schema_pkg_apis_core_v1_ScalingPolicy(ref),
	}
}

func schema_pkg_apis_core_v1_AccessEndPoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "TCP/UDP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPaddress",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_Application(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Application"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.Application", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSession(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionSpec", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSessionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSessionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSessionList",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSession"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ApplicationSession", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSessionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSessionSpec defines the desired state of ApplicationSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"applicationName": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplicationName, client provided application",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sessionData": {
						SchemaProps: spec.SchemaProps{
							Description: "Session data is a base64 string pass through into application instances when session started",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"killInstanceWhenSessionClosed": {
						SchemaProps: spec.SchemaProps{
							Description: "if a application instance evacuated all session, kill it, default true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"closeGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "how long to wait for before close session, default 60",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"openTimeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "how long to wait for session status from Starting to Available",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_ApplicationSessionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSessionStatus defines the observed state of ApplicationSession",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accessEndPoints": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint this session is using",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.AccessEndPoint"),
									},
								},
							},
						},
					},
					"sessionStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Session status, is Starting, Available or Closed.\n\nPossible enum values:\n - `\"\"` session is not allocated yet\n - `\"Available\"` session is started on instance, not used yet\n - `\"Closed\"` session is closed on instance\n - `\"Closing\"` session is closing on instance, wait for session client exit\n - `\"InUse\"` session is started on instance, session is being used\n - `\"Pending\"` session is not allocated yet\n - `\"Starting\"` session is send to instance, waiting for instance report session state\n - `\"Timeout\"` session is dead, no heartbeat, should close and start a new one",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"", "Available", "Closed", "Closing", "InUse", "Pending", "Starting", "Timeout"}},
					},
					"clientSessions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"availableTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"closeTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"availableTimeMicro": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.AccessEndPoint", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_core_v1_ApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationSpec defines the desired state of Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"containers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "runtime image and resource requirement of a application container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"usingNodeSessionService": {
						SchemaProps: spec.SchemaProps{
							Description: "container will use grpc session service on node agent to start application session",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"configData": {
						SchemaProps: spec.SchemaProps{
							Description: "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 base64 string of byte sequences",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "application scaling policy",
							Default:     map[string]interface{}{},
							Ref:         ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ScalingPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.ScalingPolicy", "k8s.io/api/core/v1.Container"},
	}
}

func schema_pkg_apis_core_v1_ApplicationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationStatus defines the observed state of Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"desiredInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of non-terminated pods targeted",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"totalInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of available instances, including pod not scheduled yet",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pendingInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of instances pending schedule and implement",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"deletingInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of instances pending delete and cleanup",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"allocatedInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of instances which have been started by node",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"idleInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of pods which do not have session on it",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"latestHistory": {
						SchemaProps: spec.SchemaProps{
							Description: "The latest deploy history of this app.",
							Default:     map[string]interface{}{},
							Ref:         ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory"),
						},
					},
					"history": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "set",
								"x-kubernetes-patch-merge-key": "updateTime",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a deployment's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.DeploymentHistory"},
	}
}

func schema_pkg_apis_core_v1_DeploymentHistory(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of deployment condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time this deployment was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentStatus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_core_v1_IdelSessionNumThreshold(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "high watermark should > low watermark, if both are 0, then no auto scaling for idle buffer, application instance are created on demand when there is no instance to hold a comming session",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"high": {
						SchemaProps: spec.SchemaProps{
							Description: "scaling down when idle session more than this number",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"low": {
						SchemaProps: spec.SchemaProps{
							Description: "scaling up when idle session less than this number",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_IdelSessionPercentThreshold(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "high watermark should > low watermark, if both are 0, then no auto scaling for idle buffer, application instance are created on demand when there is no instance to hold a comming session",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"high": {
						SchemaProps: spec.SchemaProps{
							Description: "scaling down when idle session percent more than this number",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"low": {
						SchemaProps: spec.SchemaProps{
							Description: "scaling up when idle session percent less than this number",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v1_ScalingPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"minimumInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"maximumInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"burst": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"scalingPolicyType": {
						SchemaProps: spec.SchemaProps{
							Description: "what session scaling policy to use, absolute num or percent",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"idleSessionNumThreshold": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IdelSessionNumThreshold"),
						},
					},
					"idleSessionPercentThreshold": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IdelSessionPercentThreshold"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IdelSessionNumThreshold", "centaurusinfra.io/fornax-serverless/pkg/apis/core/v1.IdelSessionPercentThreshold"},
	}
}
