// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: pkg/nodeagent/sessionservice/grpc/session_service.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionServiceClient interface {
	GetMessage(ctx context.Context, in *PodIdentifier, opts ...grpc.CallOption) (SessionService_GetMessageClient, error)
	PutMessage(ctx context.Context, in *SessionMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) GetMessage(ctx context.Context, in *PodIdentifier, opts ...grpc.CallOption) (SessionService_GetMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionService_ServiceDesc.Streams[0], "/centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService/getMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionServiceGetMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SessionService_GetMessageClient interface {
	Recv() (*SessionMessage, error)
	grpc.ClientStream
}

type sessionServiceGetMessageClient struct {
	grpc.ClientStream
}

func (x *sessionServiceGetMessageClient) Recv() (*SessionMessage, error) {
	m := new(SessionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sessionServiceClient) PutMessage(ctx context.Context, in *SessionMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService/putMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
// All implementations must embed UnimplementedSessionServiceServer
// for forward compatibility
type SessionServiceServer interface {
	GetMessage(*PodIdentifier, SessionService_GetMessageServer) error
	PutMessage(context.Context, *SessionMessage) (*empty.Empty, error)
	mustEmbedUnimplementedSessionServiceServer()
}

// UnimplementedSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (UnimplementedSessionServiceServer) GetMessage(*PodIdentifier, SessionService_GetMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedSessionServiceServer) PutMessage(context.Context, *SessionMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (UnimplementedSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {}

// UnsafeSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceServer will
// result in compilation errors.
type UnsafeSessionServiceServer interface {
	mustEmbedUnimplementedSessionServiceServer()
}

func RegisterSessionServiceServer(s grpc.ServiceRegistrar, srv SessionServiceServer) {
	s.RegisterService(&SessionService_ServiceDesc, srv)
}

func _SessionService_GetMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PodIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionServiceServer).GetMessage(m, &sessionServiceGetMessageServer{stream})
}

type SessionService_GetMessageServer interface {
	Send(*SessionMessage) error
	grpc.ServerStream
}

type sessionServiceGetMessageServer struct {
	grpc.ServerStream
}

func (x *sessionServiceGetMessageServer) Send(m *SessionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _SessionService_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService/putMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).PutMessage(ctx, req.(*SessionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionService_ServiceDesc is the grpc.ServiceDesc for SessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "centaurusinfra.io.fornaxcore.nodeagent.sessionservice.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "putMessage",
			Handler:    _SessionService_PutMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMessage",
			Handler:       _SessionService_GetMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/nodeagent/sessionservice/grpc/session_service.proto",
}
