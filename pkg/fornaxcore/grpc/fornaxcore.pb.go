// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.1
// source: pkg/fornaxcore/fornaxcore.proto

package grpc

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_UNSPECIFIED               MessageType = 0
	MessageType_FORNAX_CORE_CONFIGURATION MessageType = 100
	MessageType_NODE_CONFIGURATION        MessageType = 200
	MessageType_NODE_REGISTER             MessageType = 201
	MessageType_NODE_READY                MessageType = 202
	MessageType_NODE_STATE                MessageType = 203
	MessageType_POD_CREATE                MessageType = 300
	MessageType_POD_TERMINATE             MessageType = 301
	MessageType_POD_ACTIVE                MessageType = 302
	MessageType_POD_STATE                 MessageType = 303
	MessageType_SESSION_START             MessageType = 400
	MessageType_SESSION_CLOSE             MessageType = 401
	MessageType_SESSION_STATE             MessageType = 402
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:   "UNSPECIFIED",
		100: "FORNAX_CORE_CONFIGURATION",
		200: "NODE_CONFIGURATION",
		201: "NODE_REGISTER",
		202: "NODE_READY",
		203: "NODE_STATE",
		300: "POD_CREATE",
		301: "POD_TERMINATE",
		302: "POD_ACTIVE",
		303: "POD_STATE",
		400: "SESSION_START",
		401: "SESSION_CLOSE",
		402: "SESSION_STATE",
	}
	MessageType_value = map[string]int32{
		"UNSPECIFIED":               0,
		"FORNAX_CORE_CONFIGURATION": 100,
		"NODE_CONFIGURATION":        200,
		"NODE_REGISTER":             201,
		"NODE_READY":                202,
		"NODE_STATE":                203,
		"POD_CREATE":                300,
		"POD_TERMINATE":             301,
		"POD_ACTIVE":                302,
		"POD_STATE":                 303,
		"SESSION_START":             400,
		"SESSION_CLOSE":             401,
		"SESSION_STATE":             402,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_fornaxcore_fornaxcore_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pkg_fornaxcore_fornaxcore_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessageType(num)
	return nil
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{0}
}

type PodState_State int32

const (
	PodState_Creating    PodState_State = 0
	PodState_Standby     PodState_State = 10
	PodState_Activating  PodState_State = 20
	PodState_Running     PodState_State = 30
	PodState_Evacuating  PodState_State = 40
	PodState_Terminating PodState_State = 50
	PodState_Terminated  PodState_State = 60
)

// Enum value maps for PodState_State.
var (
	PodState_State_name = map[int32]string{
		0:  "Creating",
		10: "Standby",
		20: "Activating",
		30: "Running",
		40: "Evacuating",
		50: "Terminating",
		60: "Terminated",
	}
	PodState_State_value = map[string]int32{
		"Creating":    0,
		"Standby":     10,
		"Activating":  20,
		"Running":     30,
		"Evacuating":  40,
		"Terminating": 50,
		"Terminated":  60,
	}
)

func (x PodState_State) Enum() *PodState_State {
	p := new(PodState_State)
	*p = x
	return p
}

func (x PodState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PodState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_fornaxcore_fornaxcore_proto_enumTypes[1].Descriptor()
}

func (PodState_State) Type() protoreflect.EnumType {
	return &file_pkg_fornaxcore_fornaxcore_proto_enumTypes[1]
}

func (x PodState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PodState_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PodState_State(num)
	return nil
}

// Deprecated: Use PodState_State.Descriptor instead.
func (PodState_State) EnumDescriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{8, 0}
}

type PodCreate_CreateMode int32

const (
	PodCreate_Active  PodCreate_CreateMode = 0
	PodCreate_Standby PodCreate_CreateMode = 10
)

// Enum value maps for PodCreate_CreateMode.
var (
	PodCreate_CreateMode_name = map[int32]string{
		0:  "Active",
		10: "Standby",
	}
	PodCreate_CreateMode_value = map[string]int32{
		"Active":  0,
		"Standby": 10,
	}
)

func (x PodCreate_CreateMode) Enum() *PodCreate_CreateMode {
	p := new(PodCreate_CreateMode)
	*p = x
	return p
}

func (x PodCreate_CreateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PodCreate_CreateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_fornaxcore_fornaxcore_proto_enumTypes[2].Descriptor()
}

func (PodCreate_CreateMode) Type() protoreflect.EnumType {
	return &file_pkg_fornaxcore_fornaxcore_proto_enumTypes[2]
}

func (x PodCreate_CreateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PodCreate_CreateMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PodCreate_CreateMode(num)
	return nil
}

// Deprecated: Use PodCreate_CreateMode.Descriptor instead.
func (PodCreate_CreateMode) EnumDescriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{10, 0}
}

type SessionState_State int32

const (
	SessionState_Starting    SessionState_State = 0
	SessionState_Ready       SessionState_State = 10
	SessionState_Live        SessionState_State = 20
	SessionState_Evacuating  SessionState_State = 30
	SessionState_Terminating SessionState_State = 40
	SessionState_Terminated  SessionState_State = 50
)

// Enum value maps for SessionState_State.
var (
	SessionState_State_name = map[int32]string{
		0:  "Starting",
		10: "Ready",
		20: "Live",
		30: "Evacuating",
		40: "Terminating",
		50: "Terminated",
	}
	SessionState_State_value = map[string]int32{
		"Starting":    0,
		"Ready":       10,
		"Live":        20,
		"Evacuating":  30,
		"Terminating": 40,
		"Terminated":  50,
	}
)

func (x SessionState_State) Enum() *SessionState_State {
	p := new(SessionState_State)
	*p = x
	return p
}

func (x SessionState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_fornaxcore_fornaxcore_proto_enumTypes[3].Descriptor()
}

func (SessionState_State) Type() protoreflect.EnumType {
	return &file_pkg_fornaxcore_fornaxcore_proto_enumTypes[3]
}

func (x SessionState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SessionState_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SessionState_State(num)
	return nil
}

// Deprecated: Use SessionState_State.Descriptor instead.
func (SessionState_State) EnumDescriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{13, 0}
}

type FornaxCoreMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIdentifier *string      `protobuf:"bytes,1,req,name=messageIdentifier" json:"messageIdentifier,omitempty"`
	NodeIdentifier    *string      `protobuf:"bytes,2,req,name=nodeIdentifier" json:"nodeIdentifier,omitempty"`
	MessageType       *MessageType `protobuf:"varint,3,req,name=messageType,enum=centaurusinfra.io.fornaxcore.service.MessageType" json:"messageType,omitempty"`
	// Types that are assignable to MessageBody:
	//	*FornaxCoreMessage_FornaxCoreConfiguration
	//	*FornaxCoreMessage_NodeConfiguration
	//	*FornaxCoreMessage_NodeRegistry
	//	*FornaxCoreMessage_NodeReady
	//	*FornaxCoreMessage_NodeState
	//	*FornaxCoreMessage_PodCreate
	//	*FornaxCoreMessage_PodTerminate
	//	*FornaxCoreMessage_PodActive
	//	*FornaxCoreMessage_PodState
	//	*FornaxCoreMessage_SessionStart
	//	*FornaxCoreMessage_SessionClose
	//	*FornaxCoreMessage_SessionState
	MessageBody isFornaxCoreMessage_MessageBody `protobuf_oneof:"MessageBody"`
}

func (x *FornaxCoreMessage) Reset() {
	*x = FornaxCoreMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FornaxCoreMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FornaxCoreMessage) ProtoMessage() {}

func (x *FornaxCoreMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FornaxCoreMessage.ProtoReflect.Descriptor instead.
func (*FornaxCoreMessage) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{0}
}

func (x *FornaxCoreMessage) GetMessageIdentifier() string {
	if x != nil && x.MessageIdentifier != nil {
		return *x.MessageIdentifier
	}
	return ""
}

func (x *FornaxCoreMessage) GetNodeIdentifier() string {
	if x != nil && x.NodeIdentifier != nil {
		return *x.NodeIdentifier
	}
	return ""
}

func (x *FornaxCoreMessage) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_UNSPECIFIED
}

func (m *FornaxCoreMessage) GetMessageBody() isFornaxCoreMessage_MessageBody {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

func (x *FornaxCoreMessage) GetFornaxCoreConfiguration() *FornaxCoreConfiguration {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_FornaxCoreConfiguration); ok {
		return x.FornaxCoreConfiguration
	}
	return nil
}

func (x *FornaxCoreMessage) GetNodeConfiguration() *NodeConfiguration {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_NodeConfiguration); ok {
		return x.NodeConfiguration
	}
	return nil
}

func (x *FornaxCoreMessage) GetNodeRegistry() *NodeRegistry {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_NodeRegistry); ok {
		return x.NodeRegistry
	}
	return nil
}

func (x *FornaxCoreMessage) GetNodeReady() *NodeReady {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_NodeReady); ok {
		return x.NodeReady
	}
	return nil
}

func (x *FornaxCoreMessage) GetNodeState() *NodeState {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_NodeState); ok {
		return x.NodeState
	}
	return nil
}

func (x *FornaxCoreMessage) GetPodCreate() *PodCreate {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_PodCreate); ok {
		return x.PodCreate
	}
	return nil
}

func (x *FornaxCoreMessage) GetPodTerminate() *PodTerminate {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_PodTerminate); ok {
		return x.PodTerminate
	}
	return nil
}

func (x *FornaxCoreMessage) GetPodActive() *PodActive {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_PodActive); ok {
		return x.PodActive
	}
	return nil
}

func (x *FornaxCoreMessage) GetPodState() *PodState {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_PodState); ok {
		return x.PodState
	}
	return nil
}

func (x *FornaxCoreMessage) GetSessionStart() *SessionStart {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_SessionStart); ok {
		return x.SessionStart
	}
	return nil
}

func (x *FornaxCoreMessage) GetSessionClose() *SessionClose {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_SessionClose); ok {
		return x.SessionClose
	}
	return nil
}

func (x *FornaxCoreMessage) GetSessionState() *SessionState {
	if x, ok := x.GetMessageBody().(*FornaxCoreMessage_SessionState); ok {
		return x.SessionState
	}
	return nil
}

type isFornaxCoreMessage_MessageBody interface {
	isFornaxCoreMessage_MessageBody()
}

type FornaxCoreMessage_FornaxCoreConfiguration struct {
	FornaxCoreConfiguration *FornaxCoreConfiguration `protobuf:"bytes,100,opt,name=fornaxCoreConfiguration,oneof"`
}

type FornaxCoreMessage_NodeConfiguration struct {
	NodeConfiguration *NodeConfiguration `protobuf:"bytes,200,opt,name=nodeConfiguration,oneof"`
}

type FornaxCoreMessage_NodeRegistry struct {
	NodeRegistry *NodeRegistry `protobuf:"bytes,201,opt,name=nodeRegistry,oneof"`
}

type FornaxCoreMessage_NodeReady struct {
	NodeReady *NodeReady `protobuf:"bytes,202,opt,name=nodeReady,oneof"`
}

type FornaxCoreMessage_NodeState struct {
	NodeState *NodeState `protobuf:"bytes,203,opt,name=nodeState,oneof"`
}

type FornaxCoreMessage_PodCreate struct {
	PodCreate *PodCreate `protobuf:"bytes,300,opt,name=podCreate,oneof"`
}

type FornaxCoreMessage_PodTerminate struct {
	PodTerminate *PodTerminate `protobuf:"bytes,301,opt,name=podTerminate,oneof"`
}

type FornaxCoreMessage_PodActive struct {
	PodActive *PodActive `protobuf:"bytes,302,opt,name=podActive,oneof"`
}

type FornaxCoreMessage_PodState struct {
	PodState *PodState `protobuf:"bytes,303,opt,name=podState,oneof"`
}

type FornaxCoreMessage_SessionStart struct {
	SessionStart *SessionStart `protobuf:"bytes,400,opt,name=sessionStart,oneof"`
}

type FornaxCoreMessage_SessionClose struct {
	SessionClose *SessionClose `protobuf:"bytes,401,opt,name=sessionClose,oneof"`
}

type FornaxCoreMessage_SessionState struct {
	SessionState *SessionState `protobuf:"bytes,402,opt,name=sessionState,oneof"`
}

func (*FornaxCoreMessage_FornaxCoreConfiguration) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_NodeConfiguration) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_NodeRegistry) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_NodeReady) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_NodeState) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_PodCreate) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_PodTerminate) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_PodActive) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_PodState) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_SessionStart) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_SessionClose) isFornaxCoreMessage_MessageBody() {}

func (*FornaxCoreMessage_SessionState) isFornaxCoreMessage_MessageBody() {}

type FornaxCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         *string `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Identifier *string `protobuf:"bytes,2,req,name=identifier" json:"identifier,omitempty"`
}

func (x *FornaxCore) Reset() {
	*x = FornaxCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FornaxCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FornaxCore) ProtoMessage() {}

func (x *FornaxCore) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FornaxCore.ProtoReflect.Descriptor instead.
func (*FornaxCore) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{1}
}

func (x *FornaxCore) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *FornaxCore) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

type FornaxCoreConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary  *FornaxCore   `protobuf:"bytes,1,req,name=primary" json:"primary,omitempty"`
	Standbys []*FornaxCore `protobuf:"bytes,2,rep,name=standbys" json:"standbys,omitempty"`
}

func (x *FornaxCoreConfiguration) Reset() {
	*x = FornaxCoreConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FornaxCoreConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FornaxCoreConfiguration) ProtoMessage() {}

func (x *FornaxCoreConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FornaxCoreConfiguration.ProtoReflect.Descriptor instead.
func (*FornaxCoreConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{2}
}

func (x *FornaxCoreConfiguration) GetPrimary() *FornaxCore {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *FornaxCoreConfiguration) GetStandbys() []*FornaxCore {
	if x != nil {
		return x.Standbys
	}
	return nil
}

type NodeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node       *v1.Node  `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	DaemonPods []*v1.Pod `protobuf:"bytes,2,rep,name=daemonPods" json:"daemonPods,omitempty"`
}

func (x *NodeConfiguration) Reset() {
	*x = NodeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfiguration) ProtoMessage() {}

func (x *NodeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfiguration.ProtoReflect.Descriptor instead.
func (*NodeConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{3}
}

func (x *NodeConfiguration) GetNode() *v1.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeConfiguration) GetDaemonPods() []*v1.Pod {
	if x != nil {
		return x.DaemonPods
	}
	return nil
}

type NodeRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIp *string  `protobuf:"bytes,1,req,name=nodeIp" json:"nodeIp,omitempty"`
	Node   *v1.Node `protobuf:"bytes,2,req,name=node" json:"node,omitempty"`
}

func (x *NodeRegistry) Reset() {
	*x = NodeRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistry) ProtoMessage() {}

func (x *NodeRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistry.ProtoReflect.Descriptor instead.
func (*NodeRegistry) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{4}
}

func (x *NodeRegistry) GetNodeIp() string {
	if x != nil && x.NodeIp != nil {
		return *x.NodeIp
	}
	return ""
}

func (x *NodeRegistry) GetNode() *v1.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type NodeResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIp *string  `protobuf:"bytes,1,req,name=nodeIp" json:"nodeIp,omitempty"`
	Node   *v1.Node `protobuf:"bytes,2,req,name=node" json:"node,omitempty"`
}

func (x *NodeResource) Reset() {
	*x = NodeResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResource) ProtoMessage() {}

func (x *NodeResource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResource.ProtoReflect.Descriptor instead.
func (*NodeResource) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{5}
}

func (x *NodeResource) GetNodeIp() string {
	if x != nil && x.NodeIp != nil {
		return *x.NodeIp
	}
	return ""
}

func (x *NodeResource) GetNode() *v1.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type NodeReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIp *string  `protobuf:"bytes,1,req,name=nodeIp" json:"nodeIp,omitempty"`
	Node   *v1.Node `protobuf:"bytes,2,req,name=node" json:"node,omitempty"`
}

func (x *NodeReady) Reset() {
	*x = NodeReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReady) ProtoMessage() {}

func (x *NodeReady) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReady.ProtoReflect.Descriptor instead.
func (*NodeReady) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{6}
}

func (x *NodeReady) GetNodeIp() string {
	if x != nil && x.NodeIp != nil {
		return *x.NodeIp
	}
	return ""
}

func (x *NodeReady) GetNode() *v1.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIp        *string         `protobuf:"bytes,1,req,name=nodeIp" json:"nodeIp,omitempty"`
	Node          *v1.Node        `protobuf:"bytes,2,req,name=node" json:"node,omitempty"`
	PodStates     []*PodState     `protobuf:"bytes,3,rep,name=podStates" json:"podStates,omitempty"`
	SessionStates []*SessionState `protobuf:"bytes,4,rep,name=sessionStates" json:"sessionStates,omitempty"`
}

func (x *NodeState) Reset() {
	*x = NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState) ProtoMessage() {}

func (x *NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState.ProtoReflect.Descriptor instead.
func (*NodeState) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{7}
}

func (x *NodeState) GetNodeIp() string {
	if x != nil && x.NodeIp != nil {
		return *x.NodeIp
	}
	return ""
}

func (x *NodeState) GetNode() *v1.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeState) GetPodStates() []*PodState {
	if x != nil {
		return x.PodStates
	}
	return nil
}

func (x *NodeState) GetSessionStates() []*SessionState {
	if x != nil {
		return x.SessionStates
	}
	return nil
}

type PodState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIdentifier *string         `protobuf:"bytes,1,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier *string         `protobuf:"bytes,2,req,name=appIdentifier" json:"appIdentifier,omitempty"`
	State         *PodState_State `protobuf:"varint,3,req,name=state,enum=centaurusinfra.io.fornaxcore.service.PodState_State" json:"state,omitempty"`
	PodStatus     *v1.PodStatus   `protobuf:"bytes,4,req,name=podStatus" json:"podStatus,omitempty"`
	Resource      *PodResource    `protobuf:"bytes,5,opt,name=resource" json:"resource,omitempty"`
}

func (x *PodState) Reset() {
	*x = PodState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodState) ProtoMessage() {}

func (x *PodState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodState.ProtoReflect.Descriptor instead.
func (*PodState) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{8}
}

func (x *PodState) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *PodState) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

func (x *PodState) GetState() PodState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return PodState_Creating
}

func (x *PodState) GetPodStatus() *v1.PodStatus {
	if x != nil {
		return x.PodStatus
	}
	return nil
}

func (x *PodState) GetResource() *PodResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type PodResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceQuotaStatus *v1.ResourceQuotaStatus `protobuf:"bytes,1,opt,name=resourceQuotaStatus" json:"resourceQuotaStatus,omitempty"`
	Volumes             []*v1.AttachedVolume    `protobuf:"bytes,2,rep,name=volumes" json:"volumes,omitempty"`
}

func (x *PodResource) Reset() {
	*x = PodResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResource) ProtoMessage() {}

func (x *PodResource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResource.ProtoReflect.Descriptor instead.
func (*PodResource) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{9}
}

func (x *PodResource) GetResourceQuotaStatus() *v1.ResourceQuotaStatus {
	if x != nil {
		return x.ResourceQuotaStatus
	}
	return nil
}

func (x *PodResource) GetVolumes() []*v1.AttachedVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type PodCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIdentifier *string               `protobuf:"bytes,1,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier *string               `protobuf:"bytes,2,req,name=appIdentifier" json:"appIdentifier,omitempty"`
	Mode          *PodCreate_CreateMode `protobuf:"varint,3,req,name=mode,enum=centaurusinfra.io.fornaxcore.service.PodCreate_CreateMode" json:"mode,omitempty"`
	Pod           *v1.Pod               `protobuf:"bytes,4,req,name=pod" json:"pod,omitempty"`
	ConfigMap     *v1.ConfigMap         `protobuf:"bytes,5,opt,name=configMap" json:"configMap,omitempty"`
}

func (x *PodCreate) Reset() {
	*x = PodCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodCreate) ProtoMessage() {}

func (x *PodCreate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodCreate.ProtoReflect.Descriptor instead.
func (*PodCreate) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{10}
}

func (x *PodCreate) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *PodCreate) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

func (x *PodCreate) GetMode() PodCreate_CreateMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return PodCreate_Active
}

func (x *PodCreate) GetPod() *v1.Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *PodCreate) GetConfigMap() *v1.ConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

type PodTerminate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIdentifier *string `protobuf:"bytes,1,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier *string `protobuf:"bytes,2,req,name=appIdentifier" json:"appIdentifier,omitempty"`
}

func (x *PodTerminate) Reset() {
	*x = PodTerminate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodTerminate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodTerminate) ProtoMessage() {}

func (x *PodTerminate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodTerminate.ProtoReflect.Descriptor instead.
func (*PodTerminate) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{11}
}

func (x *PodTerminate) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *PodTerminate) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

type PodActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIdentifier *string `protobuf:"bytes,1,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier *string `protobuf:"bytes,2,req,name=appIdentifier" json:"appIdentifier,omitempty"`
}

func (x *PodActive) Reset() {
	*x = PodActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodActive) ProtoMessage() {}

func (x *PodActive) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodActive.ProtoReflect.Descriptor instead.
func (*PodActive) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{12}
}

func (x *PodActive) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *PodActive) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

type SessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionIdentifier *string             `protobuf:"bytes,1,req,name=sessionIdentifier" json:"sessionIdentifier,omitempty"`
	PodIdentifier     *string             `protobuf:"bytes,2,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier     *string             `protobuf:"bytes,3,req,name=appIdentifier" json:"appIdentifier,omitempty"`
	State             *SessionState_State `protobuf:"varint,4,req,name=state,enum=centaurusinfra.io.fornaxcore.service.SessionState_State" json:"state,omitempty"`
}

func (x *SessionState) Reset() {
	*x = SessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionState) ProtoMessage() {}

func (x *SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionState.ProtoReflect.Descriptor instead.
func (*SessionState) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{13}
}

func (x *SessionState) GetSessionIdentifier() string {
	if x != nil && x.SessionIdentifier != nil {
		return *x.SessionIdentifier
	}
	return ""
}

func (x *SessionState) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *SessionState) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

func (x *SessionState) GetState() SessionState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SessionState_Starting
}

type SessionStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionIdentifier *string `protobuf:"bytes,1,req,name=sessionIdentifier" json:"sessionIdentifier,omitempty"`
	PodIdentifier     *string `protobuf:"bytes,2,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier     *string `protobuf:"bytes,3,req,name=appIdentifier" json:"appIdentifier,omitempty"`
	SessionData       *string `protobuf:"bytes,4,req,name=sessionData" json:"sessionData,omitempty"`
}

func (x *SessionStart) Reset() {
	*x = SessionStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStart) ProtoMessage() {}

func (x *SessionStart) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStart.ProtoReflect.Descriptor instead.
func (*SessionStart) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{14}
}

func (x *SessionStart) GetSessionIdentifier() string {
	if x != nil && x.SessionIdentifier != nil {
		return *x.SessionIdentifier
	}
	return ""
}

func (x *SessionStart) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *SessionStart) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

func (x *SessionStart) GetSessionData() string {
	if x != nil && x.SessionData != nil {
		return *x.SessionData
	}
	return ""
}

type SessionClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionIdentifier *string `protobuf:"bytes,1,req,name=sessionIdentifier" json:"sessionIdentifier,omitempty"`
	PodIdentifier     *string `protobuf:"bytes,2,req,name=podIdentifier" json:"podIdentifier,omitempty"`
	AppIdentifier     *string `protobuf:"bytes,3,req,name=appIdentifier" json:"appIdentifier,omitempty"`
}

func (x *SessionClose) Reset() {
	*x = SessionClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionClose) ProtoMessage() {}

func (x *SessionClose) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_fornaxcore_fornaxcore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionClose.ProtoReflect.Descriptor instead.
func (*SessionClose) Descriptor() ([]byte, []int) {
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP(), []int{15}
}

func (x *SessionClose) GetSessionIdentifier() string {
	if x != nil && x.SessionIdentifier != nil {
		return *x.SessionIdentifier
	}
	return ""
}

func (x *SessionClose) GetPodIdentifier() string {
	if x != nil && x.PodIdentifier != nil {
		return *x.PodIdentifier
	}
	return ""
}

func (x *SessionClose) GetAppIdentifier() string {
	if x != nil && x.AppIdentifier != nil {
		return *x.AppIdentifier
	}
	return ""
}

var File_pkg_fornaxcore_fornaxcore_proto protoreflect.FileDescriptor

var file_pkg_fornaxcore_fornaxcore_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x24, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x0a, 0x0a, 0x11, 0x46, 0x6f, 0x72,
	0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f,
	0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x66, 0x6f, 0x72,
	0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x66, 0x6f, 0x72,
	0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75,
	0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x50, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x70, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x59, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18,
	0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61,
	0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x6f,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72,
	0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x3c, 0x0a, 0x0a, 0x46,
	0x6f, 0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x46, 0x6f,
	0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61,
	0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6e, 0x61,
	0x78, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x73, 0x22,
	0x7a, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x6f, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x52,
	0x0a, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x6f, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x0c, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x54, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70,
	0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x76, 0x61, 0x63,
	0x75, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x3c, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x03,
	0x70, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x64, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x22, 0x25, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x0a, 0x22, 0x5a, 0x0a, 0x0c, 0x50,
	0x6f, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x0a, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x69, 0x76, 0x65, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x76, 0x61, 0x63, 0x75,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x32, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2a, 0x8e, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x52, 0x4e, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x52, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64,
	0x12, 0x17, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xca, 0x01, 0x12, 0x0f,
	0x0a, 0x0a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xcb, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x50, 0x4f, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xac, 0x02,
	0x12, 0x12, 0x0a, 0x0d, 0x50, 0x4f, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x10, 0xad, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x4f, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0xae, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0xaf, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x90, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x91, 0x03, 0x12, 0x12, 0x0a,
	0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x92,
	0x03, 0x32, 0xd3, 0x01, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x37, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0a, 0x70, 0x75, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6e, 0x61,
	0x78, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x6e, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x39, 0x5a, 0x37, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x75, 0x72, 0x75, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x66, 0x6f, 0x72,
	0x6e, 0x61, 0x78, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x6e, 0x61, 0x78, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x72,
	0x70, 0x63,
}

var (
	file_pkg_fornaxcore_fornaxcore_proto_rawDescOnce sync.Once
	file_pkg_fornaxcore_fornaxcore_proto_rawDescData = file_pkg_fornaxcore_fornaxcore_proto_rawDesc
)

func file_pkg_fornaxcore_fornaxcore_proto_rawDescGZIP() []byte {
	file_pkg_fornaxcore_fornaxcore_proto_rawDescOnce.Do(func() {
		file_pkg_fornaxcore_fornaxcore_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_fornaxcore_fornaxcore_proto_rawDescData)
	})
	return file_pkg_fornaxcore_fornaxcore_proto_rawDescData
}

var file_pkg_fornaxcore_fornaxcore_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pkg_fornaxcore_fornaxcore_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pkg_fornaxcore_fornaxcore_proto_goTypes = []interface{}{
	(MessageType)(0),                // 0: centaurusinfra.io.fornaxcore.service.MessageType
	(PodState_State)(0),             // 1: centaurusinfra.io.fornaxcore.service.PodState.State
	(PodCreate_CreateMode)(0),       // 2: centaurusinfra.io.fornaxcore.service.PodCreate.CreateMode
	(SessionState_State)(0),         // 3: centaurusinfra.io.fornaxcore.service.SessionState.State
	(*FornaxCoreMessage)(nil),       // 4: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage
	(*FornaxCore)(nil),              // 5: centaurusinfra.io.fornaxcore.service.FornaxCore
	(*FornaxCoreConfiguration)(nil), // 6: centaurusinfra.io.fornaxcore.service.FornaxCoreConfiguration
	(*NodeConfiguration)(nil),       // 7: centaurusinfra.io.fornaxcore.service.NodeConfiguration
	(*NodeRegistry)(nil),            // 8: centaurusinfra.io.fornaxcore.service.NodeRegistry
	(*NodeResource)(nil),            // 9: centaurusinfra.io.fornaxcore.service.NodeResource
	(*NodeReady)(nil),               // 10: centaurusinfra.io.fornaxcore.service.NodeReady
	(*NodeState)(nil),               // 11: centaurusinfra.io.fornaxcore.service.NodeState
	(*PodState)(nil),                // 12: centaurusinfra.io.fornaxcore.service.PodState
	(*PodResource)(nil),             // 13: centaurusinfra.io.fornaxcore.service.PodResource
	(*PodCreate)(nil),               // 14: centaurusinfra.io.fornaxcore.service.PodCreate
	(*PodTerminate)(nil),            // 15: centaurusinfra.io.fornaxcore.service.PodTerminate
	(*PodActive)(nil),               // 16: centaurusinfra.io.fornaxcore.service.PodActive
	(*SessionState)(nil),            // 17: centaurusinfra.io.fornaxcore.service.SessionState
	(*SessionStart)(nil),            // 18: centaurusinfra.io.fornaxcore.service.SessionStart
	(*SessionClose)(nil),            // 19: centaurusinfra.io.fornaxcore.service.SessionClose
	(*v1.Node)(nil),                 // 20: k8s.io.api.core.v1.Node
	(*v1.Pod)(nil),                  // 21: k8s.io.api.core.v1.Pod
	(*v1.PodStatus)(nil),            // 22: k8s.io.api.core.v1.PodStatus
	(*v1.ResourceQuotaStatus)(nil),  // 23: k8s.io.api.core.v1.ResourceQuotaStatus
	(*v1.AttachedVolume)(nil),       // 24: k8s.io.api.core.v1.AttachedVolume
	(*v1.ConfigMap)(nil),            // 25: k8s.io.api.core.v1.ConfigMap
	(*empty.Empty)(nil),             // 26: google.protobuf.Empty
}
var file_pkg_fornaxcore_fornaxcore_proto_depIdxs = []int32{
	0,  // 0: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.messageType:type_name -> centaurusinfra.io.fornaxcore.service.MessageType
	6,  // 1: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.fornaxCoreConfiguration:type_name -> centaurusinfra.io.fornaxcore.service.FornaxCoreConfiguration
	7,  // 2: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.nodeConfiguration:type_name -> centaurusinfra.io.fornaxcore.service.NodeConfiguration
	8,  // 3: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.nodeRegistry:type_name -> centaurusinfra.io.fornaxcore.service.NodeRegistry
	10, // 4: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.nodeReady:type_name -> centaurusinfra.io.fornaxcore.service.NodeReady
	11, // 5: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.nodeState:type_name -> centaurusinfra.io.fornaxcore.service.NodeState
	14, // 6: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.podCreate:type_name -> centaurusinfra.io.fornaxcore.service.PodCreate
	15, // 7: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.podTerminate:type_name -> centaurusinfra.io.fornaxcore.service.PodTerminate
	16, // 8: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.podActive:type_name -> centaurusinfra.io.fornaxcore.service.PodActive
	12, // 9: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.podState:type_name -> centaurusinfra.io.fornaxcore.service.PodState
	18, // 10: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.sessionStart:type_name -> centaurusinfra.io.fornaxcore.service.SessionStart
	19, // 11: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.sessionClose:type_name -> centaurusinfra.io.fornaxcore.service.SessionClose
	17, // 12: centaurusinfra.io.fornaxcore.service.FornaxCoreMessage.sessionState:type_name -> centaurusinfra.io.fornaxcore.service.SessionState
	5,  // 13: centaurusinfra.io.fornaxcore.service.FornaxCoreConfiguration.primary:type_name -> centaurusinfra.io.fornaxcore.service.FornaxCore
	5,  // 14: centaurusinfra.io.fornaxcore.service.FornaxCoreConfiguration.standbys:type_name -> centaurusinfra.io.fornaxcore.service.FornaxCore
	20, // 15: centaurusinfra.io.fornaxcore.service.NodeConfiguration.node:type_name -> k8s.io.api.core.v1.Node
	21, // 16: centaurusinfra.io.fornaxcore.service.NodeConfiguration.daemonPods:type_name -> k8s.io.api.core.v1.Pod
	20, // 17: centaurusinfra.io.fornaxcore.service.NodeRegistry.node:type_name -> k8s.io.api.core.v1.Node
	20, // 18: centaurusinfra.io.fornaxcore.service.NodeResource.node:type_name -> k8s.io.api.core.v1.Node
	20, // 19: centaurusinfra.io.fornaxcore.service.NodeReady.node:type_name -> k8s.io.api.core.v1.Node
	20, // 20: centaurusinfra.io.fornaxcore.service.NodeState.node:type_name -> k8s.io.api.core.v1.Node
	12, // 21: centaurusinfra.io.fornaxcore.service.NodeState.podStates:type_name -> centaurusinfra.io.fornaxcore.service.PodState
	17, // 22: centaurusinfra.io.fornaxcore.service.NodeState.sessionStates:type_name -> centaurusinfra.io.fornaxcore.service.SessionState
	1,  // 23: centaurusinfra.io.fornaxcore.service.PodState.state:type_name -> centaurusinfra.io.fornaxcore.service.PodState.State
	22, // 24: centaurusinfra.io.fornaxcore.service.PodState.podStatus:type_name -> k8s.io.api.core.v1.PodStatus
	13, // 25: centaurusinfra.io.fornaxcore.service.PodState.resource:type_name -> centaurusinfra.io.fornaxcore.service.PodResource
	23, // 26: centaurusinfra.io.fornaxcore.service.PodResource.resourceQuotaStatus:type_name -> k8s.io.api.core.v1.ResourceQuotaStatus
	24, // 27: centaurusinfra.io.fornaxcore.service.PodResource.volumes:type_name -> k8s.io.api.core.v1.AttachedVolume
	2,  // 28: centaurusinfra.io.fornaxcore.service.PodCreate.mode:type_name -> centaurusinfra.io.fornaxcore.service.PodCreate.CreateMode
	21, // 29: centaurusinfra.io.fornaxcore.service.PodCreate.pod:type_name -> k8s.io.api.core.v1.Pod
	25, // 30: centaurusinfra.io.fornaxcore.service.PodCreate.configMap:type_name -> k8s.io.api.core.v1.ConfigMap
	3,  // 31: centaurusinfra.io.fornaxcore.service.SessionState.state:type_name -> centaurusinfra.io.fornaxcore.service.SessionState.State
	26, // 32: centaurusinfra.io.fornaxcore.service.FornaxCoreService.getMessage:input_type -> google.protobuf.Empty
	4,  // 33: centaurusinfra.io.fornaxcore.service.FornaxCoreService.putMessage:input_type -> centaurusinfra.io.fornaxcore.service.FornaxCoreMessage
	4,  // 34: centaurusinfra.io.fornaxcore.service.FornaxCoreService.getMessage:output_type -> centaurusinfra.io.fornaxcore.service.FornaxCoreMessage
	26, // 35: centaurusinfra.io.fornaxcore.service.FornaxCoreService.putMessage:output_type -> google.protobuf.Empty
	34, // [34:36] is the sub-list for method output_type
	32, // [32:34] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_pkg_fornaxcore_fornaxcore_proto_init() }
func file_pkg_fornaxcore_fornaxcore_proto_init() {
	if File_pkg_fornaxcore_fornaxcore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FornaxCoreMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FornaxCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FornaxCoreConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodTerminate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_fornaxcore_fornaxcore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_fornaxcore_fornaxcore_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FornaxCoreMessage_FornaxCoreConfiguration)(nil),
		(*FornaxCoreMessage_NodeConfiguration)(nil),
		(*FornaxCoreMessage_NodeRegistry)(nil),
		(*FornaxCoreMessage_NodeReady)(nil),
		(*FornaxCoreMessage_NodeState)(nil),
		(*FornaxCoreMessage_PodCreate)(nil),
		(*FornaxCoreMessage_PodTerminate)(nil),
		(*FornaxCoreMessage_PodActive)(nil),
		(*FornaxCoreMessage_PodState)(nil),
		(*FornaxCoreMessage_SessionStart)(nil),
		(*FornaxCoreMessage_SessionClose)(nil),
		(*FornaxCoreMessage_SessionState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_fornaxcore_fornaxcore_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_fornaxcore_fornaxcore_proto_goTypes,
		DependencyIndexes: file_pkg_fornaxcore_fornaxcore_proto_depIdxs,
		EnumInfos:         file_pkg_fornaxcore_fornaxcore_proto_enumTypes,
		MessageInfos:      file_pkg_fornaxcore_fornaxcore_proto_msgTypes,
	}.Build()
	File_pkg_fornaxcore_fornaxcore_proto = out.File
	file_pkg_fornaxcore_fornaxcore_proto_rawDesc = nil
	file_pkg_fornaxcore_fornaxcore_proto_goTypes = nil
	file_pkg_fornaxcore_fornaxcore_proto_depIdxs = nil
}
